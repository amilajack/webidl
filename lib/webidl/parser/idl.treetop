module WebIDL
  module Parser

    # http://www.w3.org/TR/WebIDL/#idl-grammar
    grammar IDL

      rule Definitions
        ws metadef:(eal:ExtendedAttributeList ws d:Definition ws defs:Definitions)? ws <ParseTree::Definitions>
      end

      rule Definition
          Module
        / Interface
        / Exception
        / TypeDef
        / ImplementsStatement
      end

      rule Module
        "module" ws name:identifier ws "{" ws defs:Definitions ws "}" ws ";" <ParseTree::Module>
      end

      rule Interface
        "interface" ws identifier ws InterfaceInheritance ws "{" ws InterfaceMembers ws "}" ws ";" <ParseTree::Interface>
      end

      rule InterfaceInheritance
        (":" ws ScopedNameList)?
      end

      rule InterfaceMembers
        (ExtendedAttributeList ws InterfaceMember ws InterfaceMembers ws)?
      end

      rule InterfaceMember
        Const / AttributeOrOperation
      end

      rule Exception
        "exception" ws identifier ws "{" ws ExceptionMembers ws "}" ws ";"
      end

      rule ExceptionMembers
        (ExtendedAttributeList ws ExceptionMember ws ExceptionMembers ws)?
      end

      rule TypeDef
        "typedef" ws type:Type ws name:identifier ws ";" <ParseTree::TypeDef>
      end

      rule ImplementsStatement
        ScopedName ws "implements" ws ScopedName ws ";"
      end

      rule Const
        "const" ws Type ws identifier ws "=" ws ConstExpr ws ";"
      end

      rule ConstExpr
        BooleanLiteral / integer / float
      end

      rule BooleanLiteral
        "true" / "false"
      end

      rule AttributeOrOperation
        "stringifier" ws StringifierAttributeOrOperation / Attribute / Operation
      end

      rule StringifierAttributeOrOperation
        Attribute / OperationRest / ";"
      end

      rule Attribute
        ReadOnly ws "attribute" ws Type ws identifier ws GetRaises ws SetRaises ws ";"
      end

      rule ReadOnly
        "readonly"?
      end

      rule GetRaises
        ("getraises" ws ExceptionList)?
      end

      rule SetRaises
        ("setraises" ws ExceptionList)?
      end

      rule Operation
        OmittableSpecials ws OperationRest
      end

      rule OmittableSpecials
        "omittable" ws Specials / Specials
      end

      rule Specials
        (Special ws Specials)?
      end

      rule Special
          "getter"
        / "setter"
        / "creator"
        / "deleter"
        / "caller"
      end

      rule OperationRest
        ReturnType ws OptionalIdentifier ws "(" ws ArgumentList ws ")" ws Raises ws ";"
      end

      rule OptionalIdentifier
        identifier?
      end

      rule Raises
        ("raises" ExceptionList)?
      end

      rule ExceptionList
        "(" ScopedNameList ")"
      end

      rule ArgumentList
        (Argument ws Arguments)?
      end

      rule Arguments
        ("," ws Argument ws Arguments)?
      end

      rule Argument
        ExtendedAttributeList ws In ws Optional ws Type ws Ellipsis ws identifier
      end

      rule In
        "in"?
      end

      rule Optional
        "optional"?
      end

      rule Ellipsis
        "..."?
      end

      rule ExceptionMember
        Const / ExceptionField
      end

      rule ExceptionField
        Type ws identifier ws ";"
      end

      rule ExtendedAttributeList
        ("[" ws ExtendedAttribute ws ExtendedAttributes ws "]")?
      end

      rule ExtendedAttributes
        ("," ws ExtendedAttribute ws ExtendedAttributes)?
      end


      #
      # avoid infinite recursion trouble with the actual spec by using the "more restricted" ones
      #

      rule ExtendedAttribute
          ExtendedAttributeNamedArgList
        / ExtendedAttributeIdent
        / ExtendedAttributeScopedName
        / ExtendedAttributeArgList
        / ExtendedAttributeNoArg
      end

      rule ExtendedAttributeNoArg
        identifier
      end

      rule ExtendedAttributeArgList
        identifier ws "(" ws ArgumentList ws ")"
      end

      rule ExtendedAttributeIdent
        identifier ws "=" ws identifier
      end

      rule ExtendedAttributeScopedName
        identifier ws "=" ws ScopedName
      end

      rule ExtendedAttributeNamedArgList
        identifier ws "=" ws identifier ws "(" ws ArgumentList ws ")"
      end


    #  rule ExtendedAttribute
    #      "(" ws ExtendedAttributeInner ws ")" ws ExtendedAttributeRest
    #    / "[" ws ExtendedAttributeInner ws "]" ws ExtendedAttributeRest
    #    / "{" ws ExtendedAttributeInner ws "}" ws ExtendedAttributeRest
    #    / Other ws ExtendedAttributeRest
    #  end
    #
    #  rule ExtendedAttributeRest
    #    ExtendedAttribute?
    #  end
    #
    #  rule ExtendedAttributeInner
    #    ( "(" ws ExtendedAttributeInner ws ")" ws ExtendedAttributeInner
    #    / "[" ws ExtendedAttributeInner ws "]" ws ExtendedAttributeInner
    #    / "{" ws ExtendedAttributeInner ws "}" ws ExtendedAttributeInner
    #    / OtherOrComma ExtendedAttributeInner)?
    #  end
    #
      rule Other
          integer
        / float
        / identifier
        / string
        / other
        / ":"
        / "::"
        / ";"
        / "<"
        / "="
        / ">"
        / "DOMString"
        / "FALSE"
        / "Object"
        / "TRUE"
        / "any"
        / "attribute"
        / "boolean"
        / "const"
        / "exception"
        / "float"
        / "getraises"
        / "in"
        / "interface"
        / "long"
        / "module"
        / "octet"
        / "raises"
        / "sequence"
        / "setraises"
        / "short"
        / "typedef"
        / "unsigned"
        / "valuetype"
      end

      rule OtherOrComma
        Other / ","
      end

      rule Type
          NullableType
        / ScopedName
        / "any"
        / "object"
      end

      #
      # added: cannot be followed by a NonSpace character, since e.g. DOMStringMap would break parsing
      #

      rule NullableType
          UnsignedIntegerType Nullable
        / "boolean" Nullable !NonSpace
        / "octet" Nullable !NonSpace
        / "float" Nullable !NonSpace
        / "double" Nullable !NonSpace
        / "DOMString" Nullable !NonSpace
        / "sequence" ws "<" ws Type ws ">" Nullable !NonSpace
      end

      rule UnsignedIntegerType
        "unsigned" ws IntegerType / IntegerType
      end

      rule IntegerType
        ("short" / "long" ws OptionalLong)
      end

      rule OptionalLong
        "long"?
      end

      rule Nullable
        "?"?
      end

      rule NonSpace
        (!' ' .)
      end

      rule ReturnType
        Type / "void"
      end

      rule ScopedNameList
        ScopedName ws ScopedNames
      end

      rule ScopedNames
        ("," ScopedName ws ScopedNames)?
      end

      rule ScopedName
        AbsoluteScopedName / RelativeScopedName
      end

      rule AbsoluteScopedName
        "::" ws identifier ws ScopedNameParts
      end

      rule RelativeScopedName
        identifier ScopedNameParts
      end

      rule ScopedNameParts
        ("::" ws identifier ws ScopedNameParts)?
      end

      rule integer
        "-"? "0" ([0-7]* / [Xx] [0-9A-Fa-f]+) / [1-9] [0-9]*
      end

      rule float
        "-"? ([0-9]+ "." [0-9]* / [0-9]* "." [0-9]+) ([Ee] [+-]? [0-9]+)? / [0-9]+ [Ee] [+-]? [0-9]+
      end

      rule identifier
        [A-Z_a-z] [0-9A-Z_a-z]*
      end

      rule string
        "\"" [^"]* "\""
      end

      rule ws
        ([\t\n\r ]* ((line_comment /  block_comment) [\t\n\r ]*)+ / [\t\n\r ]+)?
      end

      rule other
        [^\t\n\r 0-9A-Z_a-z]
      end

      rule line_comment
        "//" (![\n\r] . )*
      end

      rule block_comment
         '/*' (!'*/' . )* '*/'
      end

    end # IDL
  end # Parser
end # WebIDL
