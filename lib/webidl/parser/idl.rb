# Autogenerated from a Treetop grammar. Edits may be lost.


module WebIDL
  module Parser

    # http://dev.w3.org/2006/webapi/WebIDL/#idl-grammar
    module IDL
      include Treetop::Runtime

      def root
        @root ||= :Definitions
      end

      module Definitions0
        def eal
          elements[0]
        end

        def ws1
          elements[1]
        end

        def d
          elements[2]
        end

        def ws2
          elements[3]
        end

        def defs
          elements[4]
        end
      end

      module Definitions1
        def ws1
          elements[0]
        end

        def metadef
          elements[1]
        end

        def ws2
          elements[2]
        end
      end

      def _nt_Definitions
        start_index = index
        if node_cache[:Definitions].has_key?(index)
          cached = node_cache[:Definitions][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_ws
        s0 << r1
        if r1
          i3, s3 = index, []
          r4 = _nt_ExtendedAttributeList
          s3 << r4
          if r4
            r5 = _nt_ws
            s3 << r5
            if r5
              r6 = _nt_Definition
              s3 << r6
              if r6
                r7 = _nt_ws
                s3 << r7
                if r7
                  r8 = _nt_Definitions
                  s3 << r8
                end
              end
            end
          end
          if s3.last
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            r3.extend(Definitions0)
          else
            @index = i3
            r3 = nil
          end
          if r3
            r2 = r3
          else
            r2 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r2
          if r2
            r9 = _nt_ws
            s0 << r9
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::Definitions,input, i0...index, s0)
          r0.extend(Definitions1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:Definitions][start_index] = r0

        r0
      end

      def _nt_Definition
        start_index = index
        if node_cache[:Definition].has_key?(index)
          cached = node_cache[:Definition][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_Module
        if r1
          r0 = r1
        else
          r2 = _nt_Interface
          if r2
            r0 = r2
          else
            r3 = _nt_Dictionary
            if r3
              r0 = r3
            else
              r4 = _nt_Partial
              if r4
                r0 = r4
              else
                r5 = _nt_Exception
                if r5
                  r0 = r5
                else
                  r6 = _nt_TypeDef
                  if r6
                    r0 = r6
                  else
                    r7 = _nt_ImplementsStatement
                    if r7
                      r0 = r7
                    else
                      r8 = _nt_Enum
                      if r8
                        r0 = r8
                      else
                        @index = i0
                        r0 = nil
                      end
                    end
                  end
                end
              end
            end
          end
        end

        node_cache[:Definition][start_index] = r0

        r0
      end

      module Module0
        def ws1
          elements[1]
        end

        def name
          elements[2]
        end

        def ws2
          elements[3]
        end

        def ws3
          elements[5]
        end

        def defs
          elements[6]
        end

        def ws4
          elements[7]
        end

        def ws5
          elements[9]
        end

      end

      def _nt_Module
        start_index = index
        if node_cache[:Module].has_key?(index)
          cached = node_cache[:Module][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("module", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
          @index += 6
        else
          terminal_parse_failure("module")
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            r3 = _nt_identifier
            s0 << r3
            if r3
              r4 = _nt_ws
              s0 << r4
              if r4
                if has_terminal?("{", false, index)
                  r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("{")
                  r5 = nil
                end
                s0 << r5
                if r5
                  r6 = _nt_ws
                  s0 << r6
                  if r6
                    r7 = _nt_Definitions
                    s0 << r7
                    if r7
                      r8 = _nt_ws
                      s0 << r8
                      if r8
                        if has_terminal?("}", false, index)
                          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure("}")
                          r9 = nil
                        end
                        s0 << r9
                        if r9
                          r10 = _nt_ws
                          s0 << r10
                          if r10
                            if has_terminal?(";", false, index)
                              r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure(";")
                              r11 = nil
                            end
                            s0 << r11
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::Module,input, i0...index, s0)
          r0.extend(Module0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:Module][start_index] = r0

        r0
      end

      module Interface0
        def ws1
          elements[1]
        end

        def name
          elements[2]
        end

        def ws2
          elements[3]
        end

        def inherits
          elements[4]
        end

        def ws3
          elements[5]
        end

        def ws4
          elements[7]
        end

        def members
          elements[8]
        end

        def ws5
          elements[9]
        end

        def ws6
          elements[11]
        end

      end

      def _nt_Interface
        start_index = index
        if node_cache[:Interface].has_key?(index)
          cached = node_cache[:Interface][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("interface", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 9))
          @index += 9
        else
          terminal_parse_failure("interface")
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            r3 = _nt_identifier
            s0 << r3
            if r3
              r4 = _nt_ws
              s0 << r4
              if r4
                r5 = _nt_Inheritance
                s0 << r5
                if r5
                  r6 = _nt_ws
                  s0 << r6
                  if r6
                    if has_terminal?("{", false, index)
                      r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure("{")
                      r7 = nil
                    end
                    s0 << r7
                    if r7
                      r8 = _nt_ws
                      s0 << r8
                      if r8
                        r9 = _nt_InterfaceMembers
                        s0 << r9
                        if r9
                          r10 = _nt_ws
                          s0 << r10
                          if r10
                            if has_terminal?("}", false, index)
                              r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure("}")
                              r11 = nil
                            end
                            s0 << r11
                            if r11
                              r12 = _nt_ws
                              s0 << r12
                              if r12
                                if has_terminal?(";", false, index)
                                  r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                  @index += 1
                                else
                                  terminal_parse_failure(";")
                                  r13 = nil
                                end
                                s0 << r13
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::Interface,input, i0...index, s0)
          r0.extend(Interface0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:Interface][start_index] = r0

        r0
      end

      module Partial0
        def ws
          elements[1]
        end

        def defn
          elements[2]
        end
      end

      module Partial1
        def build(parent) defn.build(parent) end
      end

      def _nt_Partial
        start_index = index
        if node_cache[:Partial].has_key?(index)
          cached = node_cache[:Partial][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("partial", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
          @index += 7
        else
          terminal_parse_failure("partial")
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            r3 = _nt_PartialDefinition
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(Partial0)
          r0.extend(Partial1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:Partial][start_index] = r0

        r0
      end

      def _nt_PartialDefinition
        start_index = index
        if node_cache[:PartialDefinition].has_key?(index)
          cached = node_cache[:PartialDefinition][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_PartialInterface
        if r1
          r0 = r1
        else
          r2 = _nt_PartialDictionary
          if r2
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:PartialDefinition][start_index] = r0

        r0
      end

      module PartialInterface0
        def ws1
          elements[1]
        end

        def name
          elements[2]
        end

        def ws2
          elements[3]
        end

        def ws3
          elements[5]
        end

        def members
          elements[6]
        end

        def ws4
          elements[7]
        end

        def ws5
          elements[9]
        end

      end

      def _nt_PartialInterface
        start_index = index
        if node_cache[:PartialInterface].has_key?(index)
          cached = node_cache[:PartialInterface][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("interface", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 9))
          @index += 9
        else
          terminal_parse_failure("interface")
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            r3 = _nt_identifier
            s0 << r3
            if r3
              r4 = _nt_ws
              s0 << r4
              if r4
                if has_terminal?("{", false, index)
                  r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("{")
                  r5 = nil
                end
                s0 << r5
                if r5
                  r6 = _nt_ws
                  s0 << r6
                  if r6
                    r7 = _nt_InterfaceMembers
                    s0 << r7
                    if r7
                      r8 = _nt_ws
                      s0 << r8
                      if r8
                        if has_terminal?("}", false, index)
                          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure("}")
                          r9 = nil
                        end
                        s0 << r9
                        if r9
                          r10 = _nt_ws
                          s0 << r10
                          if r10
                            if has_terminal?(";", false, index)
                              r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure(";")
                              r11 = nil
                            end
                            s0 << r11
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::PartialInterface,input, i0...index, s0)
          r0.extend(PartialInterface0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:PartialInterface][start_index] = r0

        r0
      end

      module Inheritance0
        def ws
          elements[1]
        end

        def names
          elements[2]
        end
      end

      def _nt_Inheritance
        start_index = index
        if node_cache[:Inheritance].has_key?(index)
          cached = node_cache[:Inheritance][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        if has_terminal?(":", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(":")
          r2 = nil
        end
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            r4 = _nt_ScopedNameList
            s1 << r4
          end
        end
        if s1.last
          r1 = instantiate_node(ParseTree::Inheritance,input, i1...index, s1)
          r1.extend(Inheritance0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:Inheritance][start_index] = r0

        r0
      end

      module InterfaceMembers0
        def eal
          elements[0]
        end

        def ws1
          elements[1]
        end

        def member
          elements[2]
        end

        def ws2
          elements[3]
        end

        def members
          elements[4]
        end

        def ws3
          elements[5]
        end
      end

      def _nt_InterfaceMembers
        start_index = index
        if node_cache[:InterfaceMembers].has_key?(index)
          cached = node_cache[:InterfaceMembers][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        r2 = _nt_ExtendedAttributeList
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            r4 = _nt_InterfaceMember
            s1 << r4
            if r4
              r5 = _nt_ws
              s1 << r5
              if r5
                r6 = _nt_InterfaceMembers
                s1 << r6
                if r6
                  r7 = _nt_ws
                  s1 << r7
                end
              end
            end
          end
        end
        if s1.last
          r1 = instantiate_node(ParseTree::InterfaceMembers,input, i1...index, s1)
          r1.extend(InterfaceMembers0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:InterfaceMembers][start_index] = r0

        r0
      end

      def _nt_InterfaceMember
        start_index = index
        if node_cache[:InterfaceMember].has_key?(index)
          cached = node_cache[:InterfaceMember][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_Const
        if r1
          r0 = r1
        else
          r2 = _nt_AttributeOrOperation
          if r2
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:InterfaceMember][start_index] = r0

        r0
      end

      module Dictionary0
        def ws1
          elements[1]
        end

        def name
          elements[2]
        end

        def ws2
          elements[3]
        end

        def inherits
          elements[4]
        end

        def ws3
          elements[5]
        end

        def ws4
          elements[7]
        end

        def members
          elements[8]
        end

        def ws5
          elements[9]
        end

        def ws6
          elements[11]
        end

      end

      def _nt_Dictionary
        start_index = index
        if node_cache[:Dictionary].has_key?(index)
          cached = node_cache[:Dictionary][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("dictionary", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 10))
          @index += 10
        else
          terminal_parse_failure("dictionary")
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            r3 = _nt_identifier
            s0 << r3
            if r3
              r4 = _nt_ws
              s0 << r4
              if r4
                r5 = _nt_Inheritance
                s0 << r5
                if r5
                  r6 = _nt_ws
                  s0 << r6
                  if r6
                    if has_terminal?("{", false, index)
                      r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure("{")
                      r7 = nil
                    end
                    s0 << r7
                    if r7
                      r8 = _nt_ws
                      s0 << r8
                      if r8
                        r9 = _nt_DictionaryMembers
                        s0 << r9
                        if r9
                          r10 = _nt_ws
                          s0 << r10
                          if r10
                            if has_terminal?("}", false, index)
                              r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure("}")
                              r11 = nil
                            end
                            s0 << r11
                            if r11
                              r12 = _nt_ws
                              s0 << r12
                              if r12
                                if has_terminal?(";", false, index)
                                  r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                  @index += 1
                                else
                                  terminal_parse_failure(";")
                                  r13 = nil
                                end
                                s0 << r13
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::Dictionary,input, i0...index, s0)
          r0.extend(Dictionary0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:Dictionary][start_index] = r0

        r0
      end

      module PartialDictionary0
        def ws1
          elements[1]
        end

        def name
          elements[2]
        end

        def ws2
          elements[3]
        end

        def ws3
          elements[5]
        end

        def members
          elements[6]
        end

        def ws4
          elements[7]
        end

        def ws5
          elements[9]
        end

      end

      def _nt_PartialDictionary
        start_index = index
        if node_cache[:PartialDictionary].has_key?(index)
          cached = node_cache[:PartialDictionary][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("dictionary", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 10))
          @index += 10
        else
          terminal_parse_failure("dictionary")
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            r3 = _nt_identifier
            s0 << r3
            if r3
              r4 = _nt_ws
              s0 << r4
              if r4
                if has_terminal?("{", false, index)
                  r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("{")
                  r5 = nil
                end
                s0 << r5
                if r5
                  r6 = _nt_ws
                  s0 << r6
                  if r6
                    r7 = _nt_DictionaryMembers
                    s0 << r7
                    if r7
                      r8 = _nt_ws
                      s0 << r8
                      if r8
                        if has_terminal?("}", false, index)
                          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure("}")
                          r9 = nil
                        end
                        s0 << r9
                        if r9
                          r10 = _nt_ws
                          s0 << r10
                          if r10
                            if has_terminal?(";", false, index)
                              r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure(";")
                              r11 = nil
                            end
                            s0 << r11
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::PartialDictionary,input, i0...index, s0)
          r0.extend(PartialDictionary0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:PartialDictionary][start_index] = r0

        r0
      end

      module DictionaryMembers0
        def eal
          elements[0]
        end

        def ws1
          elements[1]
        end

        def member
          elements[2]
        end

        def ws2
          elements[3]
        end

        def members
          elements[4]
        end
      end

      def _nt_DictionaryMembers
        start_index = index
        if node_cache[:DictionaryMembers].has_key?(index)
          cached = node_cache[:DictionaryMembers][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        r2 = _nt_ExtendedAttributeList
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            r4 = _nt_DictionaryMember
            s1 << r4
            if r4
              r5 = _nt_ws
              s1 << r5
              if r5
                r6 = _nt_DictionaryMembers
                s1 << r6
              end
            end
          end
        end
        if s1.last
          r1 = instantiate_node(ParseTree::DictionaryMembers,input, i1...index, s1)
          r1.extend(DictionaryMembers0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:DictionaryMembers][start_index] = r0

        r0
      end

      module DictionaryMember0
        def type
          elements[0]
        end

        def ws1
          elements[1]
        end

        def name
          elements[2]
        end

        def ws2
          elements[3]
        end

        def default
          elements[4]
        end

        def ws3
          elements[5]
        end

      end

      def _nt_DictionaryMember
        start_index = index
        if node_cache[:DictionaryMember].has_key?(index)
          cached = node_cache[:DictionaryMember][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_Type
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            r3 = _nt_identifier
            s0 << r3
            if r3
              r4 = _nt_ws
              s0 << r4
              if r4
                r5 = _nt_Default
                s0 << r5
                if r5
                  r6 = _nt_ws
                  s0 << r6
                  if r6
                    if has_terminal?(";", false, index)
                      r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(";")
                      r7 = nil
                    end
                    s0 << r7
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::DictionaryMember,input, i0...index, s0)
          r0.extend(DictionaryMember0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:DictionaryMember][start_index] = r0

        r0
      end

      module Default0
        def ws
          elements[1]
        end

        def val
          elements[2]
        end
      end

      module Default1
        def build() val.build end
      end

      def _nt_Default
        start_index = index
        if node_cache[:Default].has_key?(index)
          cached = node_cache[:Default][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        if has_terminal?("=", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("=")
          r2 = nil
        end
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            r4 = _nt_DefaultValue
            s1 << r4
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(Default0)
          r1.extend(Default1)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:Default][start_index] = r0

        r0
      end

      def _nt_DefaultValue
        start_index = index
        if node_cache[:DefaultValue].has_key?(index)
          cached = node_cache[:DefaultValue][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_string
        if r1
          r0 = r1
        else
          r2 = _nt_ConstValue
          if r2
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:DefaultValue][start_index] = r0

        r0
      end

      module Exception0
        def ws1
          elements[1]
        end

        def name
          elements[2]
        end

        def ws2
          elements[3]
        end

        def inherits
          elements[4]
        end

        def ws3
          elements[5]
        end

        def ws4
          elements[7]
        end

        def members
          elements[8]
        end

        def ws5
          elements[9]
        end

        def ws6
          elements[11]
        end

      end

      def _nt_Exception
        start_index = index
        if node_cache[:Exception].has_key?(index)
          cached = node_cache[:Exception][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("exception", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 9))
          @index += 9
        else
          terminal_parse_failure("exception")
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            r3 = _nt_identifier
            s0 << r3
            if r3
              r4 = _nt_ws
              s0 << r4
              if r4
                r5 = _nt_Inheritance
                s0 << r5
                if r5
                  r6 = _nt_ws
                  s0 << r6
                  if r6
                    if has_terminal?("{", false, index)
                      r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure("{")
                      r7 = nil
                    end
                    s0 << r7
                    if r7
                      r8 = _nt_ws
                      s0 << r8
                      if r8
                        r9 = _nt_ExceptionMembers
                        s0 << r9
                        if r9
                          r10 = _nt_ws
                          s0 << r10
                          if r10
                            if has_terminal?("}", false, index)
                              r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure("}")
                              r11 = nil
                            end
                            s0 << r11
                            if r11
                              r12 = _nt_ws
                              s0 << r12
                              if r12
                                if has_terminal?(";", false, index)
                                  r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                  @index += 1
                                else
                                  terminal_parse_failure(";")
                                  r13 = nil
                                end
                                s0 << r13
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::Exception,input, i0...index, s0)
          r0.extend(Exception0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:Exception][start_index] = r0

        r0
      end

      module ExceptionMembers0
        def eal
          elements[0]
        end

        def ws1
          elements[1]
        end

        def member
          elements[2]
        end

        def ws2
          elements[3]
        end

        def members
          elements[4]
        end

        def ws3
          elements[5]
        end
      end

      def _nt_ExceptionMembers
        start_index = index
        if node_cache[:ExceptionMembers].has_key?(index)
          cached = node_cache[:ExceptionMembers][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        r2 = _nt_ExtendedAttributeList
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            r4 = _nt_ExceptionMember
            s1 << r4
            if r4
              r5 = _nt_ws
              s1 << r5
              if r5
                r6 = _nt_ExceptionMembers
                s1 << r6
                if r6
                  r7 = _nt_ws
                  s1 << r7
                end
              end
            end
          end
        end
        if s1.last
          r1 = instantiate_node(ParseTree::InterfaceMembers,input, i1...index, s1)
          r1.extend(ExceptionMembers0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:ExceptionMembers][start_index] = r0

        r0
      end

      module TypeDef0
        def ws1
          elements[1]
        end

        def type
          elements[2]
        end

        def ws2
          elements[3]
        end

        def name
          elements[4]
        end

        def ws3
          elements[5]
        end

      end

      def _nt_TypeDef
        start_index = index
        if node_cache[:TypeDef].has_key?(index)
          cached = node_cache[:TypeDef][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("typedef", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
          @index += 7
        else
          terminal_parse_failure("typedef")
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            r3 = _nt_Type
            s0 << r3
            if r3
              r4 = _nt_ws
              s0 << r4
              if r4
                r5 = _nt_identifier
                s0 << r5
                if r5
                  r6 = _nt_ws
                  s0 << r6
                  if r6
                    if has_terminal?(";", false, index)
                      r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(";")
                      r7 = nil
                    end
                    s0 << r7
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::TypeDef,input, i0...index, s0)
          r0.extend(TypeDef0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:TypeDef][start_index] = r0

        r0
      end

      module ImplementsStatement0
        def implementor
          elements[0]
        end

        def ws1
          elements[1]
        end

        def ws2
          elements[3]
        end

        def implementee
          elements[4]
        end

        def ws3
          elements[5]
        end

      end

      def _nt_ImplementsStatement
        start_index = index
        if node_cache[:ImplementsStatement].has_key?(index)
          cached = node_cache[:ImplementsStatement][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_ScopedName
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            if has_terminal?("implements", false, index)
              r3 = instantiate_node(SyntaxNode,input, index...(index + 10))
              @index += 10
            else
              terminal_parse_failure("implements")
              r3 = nil
            end
            s0 << r3
            if r3
              r4 = _nt_ws
              s0 << r4
              if r4
                r5 = _nt_ScopedName
                s0 << r5
                if r5
                  r6 = _nt_ws
                  s0 << r6
                  if r6
                    if has_terminal?(";", false, index)
                      r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(";")
                      r7 = nil
                    end
                    s0 << r7
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::ImplementsStatement,input, i0...index, s0)
          r0.extend(ImplementsStatement0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:ImplementsStatement][start_index] = r0

        r0
      end

      module Const0
        def ws1
          elements[1]
        end

        def type
          elements[2]
        end

        def ws2
          elements[3]
        end

        def name
          elements[4]
        end

        def ws3
          elements[5]
        end

        def ws4
          elements[7]
        end

        def const_expr
          elements[8]
        end

        def ws5
          elements[9]
        end

      end

      def _nt_Const
        start_index = index
        if node_cache[:Const].has_key?(index)
          cached = node_cache[:Const][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("const", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
          @index += 5
        else
          terminal_parse_failure("const")
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            r3 = _nt_Type
            s0 << r3
            if r3
              r4 = _nt_ws
              s0 << r4
              if r4
                r5 = _nt_identifier
                s0 << r5
                if r5
                  r6 = _nt_ws
                  s0 << r6
                  if r6
                    if has_terminal?("=", false, index)
                      r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure("=")
                      r7 = nil
                    end
                    s0 << r7
                    if r7
                      r8 = _nt_ws
                      s0 << r8
                      if r8
                        r9 = _nt_ConstValue
                        s0 << r9
                        if r9
                          r10 = _nt_ws
                          s0 << r10
                          if r10
                            if has_terminal?(";", false, index)
                              r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure(";")
                              r11 = nil
                            end
                            s0 << r11
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::Const,input, i0...index, s0)
          r0.extend(Const0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:Const][start_index] = r0

        r0
      end

      module ConstValue0
        def build() nil end
      end

      def _nt_ConstValue
        start_index = index
        if node_cache[:ConstValue].has_key?(index)
          cached = node_cache[:ConstValue][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        if has_terminal?("null", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
          r1.extend(ConstValue0)
          @index += 4
        else
          terminal_parse_failure("null")
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r2 = _nt_BooleanLiteral
          if r2
            r0 = r2
          else
            r3 = _nt_FloatLiteral
            if r3
              r0 = r3
            else
              r4 = _nt_integer
              if r4
                r0 = r4
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end

        node_cache[:ConstValue][start_index] = r0

        r0
      end

      module BooleanLiteral0
        def build() text_value == "true" end
      end

      def _nt_BooleanLiteral
        start_index = index
        if node_cache[:BooleanLiteral].has_key?(index)
          cached = node_cache[:BooleanLiteral][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        if has_terminal?("true", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure("true")
          r1 = nil
        end
        if r1
          r0 = r1
          r0.extend(BooleanLiteral0)
        else
          if has_terminal?("false", false, index)
            r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
            @index += 5
          else
            terminal_parse_failure("false")
            r2 = nil
          end
          if r2
            r0 = r2
            r0.extend(BooleanLiteral0)
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:BooleanLiteral][start_index] = r0

        r0
      end

      module FloatLiteral0
      end

      module FloatLiteral1
        def build() -1.0/0 end
      end

      module FloatLiteral2
        def build() 1.0/0 end
      end

      module FloatLiteral3
        def build() Float::NAN end
      end

      def _nt_FloatLiteral
        start_index = index
        if node_cache[:FloatLiteral].has_key?(index)
          cached = node_cache[:FloatLiteral][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_float
        if r1
          r0 = r1
        else
          i2, s2 = index, []
          if has_terminal?("-", false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("-")
            r3 = nil
          end
          s2 << r3
          if r3
            if has_terminal?("Infinity", false, index)
              r4 = instantiate_node(SyntaxNode,input, index...(index + 8))
              @index += 8
            else
              terminal_parse_failure("Infinity")
              r4 = nil
            end
            s2 << r4
          end
          if s2.last
            r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
            r2.extend(FloatLiteral0)
            r2.extend(FloatLiteral1)
          else
            @index = i2
            r2 = nil
          end
          if r2
            r0 = r2
          else
            if has_terminal?("Infinity", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 8))
              r5.extend(FloatLiteral2)
              @index += 8
            else
              terminal_parse_failure("Infinity")
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?("NaN", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 3))
                r6.extend(FloatLiteral3)
                @index += 3
              else
                terminal_parse_failure("NaN")
                r6 = nil
              end
              if r6
                r0 = r6
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end

        node_cache[:FloatLiteral][start_index] = r0

        r0
      end

      module Enum0
        def ws1
          elements[1]
        end

        def id
          elements[2]
        end

        def ws2
          elements[3]
        end

        def ws3
          elements[5]
        end

        def values
          elements[6]
        end

        def ws4
          elements[7]
        end

        def ws5
          elements[9]
        end

      end

      def _nt_Enum
        start_index = index
        if node_cache[:Enum].has_key?(index)
          cached = node_cache[:Enum][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("enum", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure("enum")
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            r3 = _nt_identifier
            s0 << r3
            if r3
              r4 = _nt_ws
              s0 << r4
              if r4
                if has_terminal?("{", false, index)
                  r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("{")
                  r5 = nil
                end
                s0 << r5
                if r5
                  r6 = _nt_ws
                  s0 << r6
                  if r6
                    r7 = _nt_EnumValueList
                    s0 << r7
                    if r7
                      r8 = _nt_ws
                      s0 << r8
                      if r8
                        if has_terminal?("}", false, index)
                          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure("}")
                          r9 = nil
                        end
                        s0 << r9
                        if r9
                          r10 = _nt_ws
                          s0 << r10
                          if r10
                            if has_terminal?(";", false, index)
                              r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure(";")
                              r11 = nil
                            end
                            s0 << r11
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::Enum,input, i0...index, s0)
          r0.extend(Enum0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:Enum][start_index] = r0

        r0
      end

      module EnumValueList0
        def name
          elements[0]
        end

        def ws1
          elements[1]
        end

        def vals
          elements[2]
        end

        def ws2
          elements[3]
        end

      end

      module EnumValueList1
        def build()
          res = [name.build]
          res += vals.build if vals.any?

          res
        end
      end

      def _nt_EnumValueList
        start_index = index
        if node_cache[:EnumValueList].has_key?(index)
          cached = node_cache[:EnumValueList][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_string
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            r3 = _nt_EnumValues
            s0 << r3
            if r3
              r4 = _nt_ws
              s0 << r4
              if r4
                if has_terminal?(",", false, index)
                  r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(",")
                  r6 = nil
                end
                if r6
                  r5 = r6
                else
                  r5 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r5
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(EnumValueList0)
          r0.extend(EnumValueList1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:EnumValueList][start_index] = r0

        r0
      end

      module EnumValues0
        def ws1
          elements[1]
        end

        def name
          elements[2]
        end

        def ws2
          elements[3]
        end

        def vals
          elements[4]
        end
      end

      module EnumValues1
        def build()
          res = [name.build]
          res += vals.build if vals.any?

          res
        end
      end

      def _nt_EnumValues
        start_index = index
        if node_cache[:EnumValues].has_key?(index)
          cached = node_cache[:EnumValues][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        if has_terminal?(",", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(",")
          r2 = nil
        end
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            r4 = _nt_string
            s1 << r4
            if r4
              r5 = _nt_ws
              s1 << r5
              if r5
                r6 = _nt_EnumValues
                s1 << r6
              end
            end
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(EnumValues0)
          r1.extend(EnumValues1)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:EnumValues][start_index] = r0

        r0
      end

      def _nt_AttributeOrOperation
        start_index = index
        if node_cache[:AttributeOrOperation].has_key?(index)
          cached = node_cache[:AttributeOrOperation][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_StringifierAttributeOrOperation
        if r1
          r0 = r1
        else
          r2 = _nt_Attribute
          if r2
            r0 = r2
          else
            r3 = _nt_Operation
            if r3
              r0 = r3
            else
              @index = i0
              r0 = nil
            end
          end
        end

        node_cache[:AttributeOrOperation][start_index] = r0

        r0
      end

      module StringifierAttributeOrOperation0
        def ws
          elements[1]
        end

        def a_or_op
          elements[2]
        end
      end

      def _nt_StringifierAttributeOrOperation
        start_index = index
        if node_cache[:StringifierAttributeOrOperation].has_key?(index)
          cached = node_cache[:StringifierAttributeOrOperation][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("stringifier", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 11))
          @index += 11
        else
          terminal_parse_failure("stringifier")
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            i3 = index
            r4 = _nt_Attribute
            if r4
              r3 = r4
            else
              r5 = _nt_OperationRest
              if r5
                r3 = r5
              else
                if has_terminal?(";", false, index)
                  r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(";")
                  r6 = nil
                end
                if r6
                  r3 = r6
                else
                  @index = i3
                  r3 = nil
                end
              end
            end
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::StringifierAttributeOrOperation,input, i0...index, s0)
          r0.extend(StringifierAttributeOrOperation0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:StringifierAttributeOrOperation][start_index] = r0

        r0
      end

      module Attribute0
        def readonly
          elements[0]
        end

        def ws1
          elements[1]
        end

        def ws2
          elements[3]
        end

        def type
          elements[4]
        end

        def ws3
          elements[5]
        end

        def name
          elements[6]
        end

        def ws4
          elements[7]
        end

        def getraises
          elements[8]
        end

        def ws5
          elements[9]
        end

        def setraises
          elements[10]
        end

        def ws6
          elements[11]
        end

      end

      def _nt_Attribute
        start_index = index
        if node_cache[:Attribute].has_key?(index)
          cached = node_cache[:Attribute][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_ReadOnly
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            if has_terminal?("attribute", false, index)
              r3 = instantiate_node(SyntaxNode,input, index...(index + 9))
              @index += 9
            else
              terminal_parse_failure("attribute")
              r3 = nil
            end
            s0 << r3
            if r3
              r4 = _nt_ws
              s0 << r4
              if r4
                r5 = _nt_Type
                s0 << r5
                if r5
                  r6 = _nt_ws
                  s0 << r6
                  if r6
                    r7 = _nt_identifier
                    s0 << r7
                    if r7
                      r8 = _nt_ws
                      s0 << r8
                      if r8
                        r9 = _nt_GetRaises
                        s0 << r9
                        if r9
                          r10 = _nt_ws
                          s0 << r10
                          if r10
                            r11 = _nt_SetRaises
                            s0 << r11
                            if r11
                              r12 = _nt_ws
                              s0 << r12
                              if r12
                                if has_terminal?(";", false, index)
                                  r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                  @index += 1
                                else
                                  terminal_parse_failure(";")
                                  r13 = nil
                                end
                                s0 << r13
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::Attribute,input, i0...index, s0)
          r0.extend(Attribute0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:Attribute][start_index] = r0

        r0
      end

      def _nt_ReadOnly
        start_index = index
        if node_cache[:ReadOnly].has_key?(index)
          cached = node_cache[:ReadOnly][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        if has_terminal?("readonly", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
          @index += 8
        else
          terminal_parse_failure("readonly")
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:ReadOnly][start_index] = r0

        r0
      end

      module GetRaises0
        def ws
          elements[1]
        end

        def list
          elements[2]
        end
      end

      def _nt_GetRaises
        start_index = index
        if node_cache[:GetRaises].has_key?(index)
          cached = node_cache[:GetRaises][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        if has_terminal?("getraises", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 9))
          @index += 9
        else
          terminal_parse_failure("getraises")
          r2 = nil
        end
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            r4 = _nt_ExceptionList
            s1 << r4
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(GetRaises0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:GetRaises][start_index] = r0

        r0
      end

      module SetRaises0
        def ws
          elements[1]
        end

        def list
          elements[2]
        end
      end

      def _nt_SetRaises
        start_index = index
        if node_cache[:SetRaises].has_key?(index)
          cached = node_cache[:SetRaises][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        if has_terminal?("setraises", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 9))
          @index += 9
        else
          terminal_parse_failure("setraises")
          r2 = nil
        end
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            r4 = _nt_ExceptionList
            s1 << r4
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(SetRaises0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:SetRaises][start_index] = r0

        r0
      end

      module Operation0
        def static
          elements[0]
        end

        def specials
          elements[1]
        end

        def ws
          elements[2]
        end

        def op
          elements[3]
        end
      end

      def _nt_Operation
        start_index = index
        if node_cache[:Operation].has_key?(index)
          cached = node_cache[:Operation][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("static", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
          @index += 6
        else
          terminal_parse_failure("static")
          r2 = nil
        end
        if r2
          r1 = r2
        else
          r1 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r1
        if r1
          i3 = index
          r4 = _nt_OmittableSpecials
          if r4
            r3 = r4
          else
            r5 = _nt_Specials
            if r5
              r3 = r5
            else
              @index = i3
              r3 = nil
            end
          end
          s0 << r3
          if r3
            r6 = _nt_ws
            s0 << r6
            if r6
              r7 = _nt_OperationRest
              s0 << r7
            end
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::Operation,input, i0...index, s0)
          r0.extend(Operation0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:Operation][start_index] = r0

        r0
      end

      module OmittableSpecials0
        def omit
          elements[0]
        end

        def ws
          elements[1]
        end

        def Specials
          elements[2]
        end
      end

      def _nt_OmittableSpecials
        start_index = index
        if node_cache[:OmittableSpecials].has_key?(index)
          cached = node_cache[:OmittableSpecials][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("omittable", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 9))
          @index += 9
        else
          terminal_parse_failure("omittable")
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            r3 = _nt_Specials
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::OmittableSpecials,input, i0...index, s0)
          r0.extend(OmittableSpecials0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:OmittableSpecials][start_index] = r0

        r0
      end

      module Specials0
        def first
          elements[0]
        end

        def ws
          elements[1]
        end

        def rest
          elements[2]
        end
      end

      def _nt_Specials
        start_index = index
        if node_cache[:Specials].has_key?(index)
          cached = node_cache[:Specials][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        r2 = _nt_Special
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            r4 = _nt_Specials
            s1 << r4
          end
        end
        if s1.last
          r1 = instantiate_node(ParseTree::Specials,input, i1...index, s1)
          r1.extend(Specials0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:Specials][start_index] = r0

        r0
      end

      def _nt_Special
        start_index = index
        if node_cache[:Special].has_key?(index)
          cached = node_cache[:Special][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        if has_terminal?("getter", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
          @index += 6
        else
          terminal_parse_failure("getter")
          r1 = nil
        end
        if r1
          r0 = r1
        else
          if has_terminal?("setter", false, index)
            r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
            @index += 6
          else
            terminal_parse_failure("setter")
            r2 = nil
          end
          if r2
            r0 = r2
          else
            if has_terminal?("creator", false, index)
              r3 = instantiate_node(SyntaxNode,input, index...(index + 7))
              @index += 7
            else
              terminal_parse_failure("creator")
              r3 = nil
            end
            if r3
              r0 = r3
            else
              if has_terminal?("deleter", false, index)
                r4 = instantiate_node(SyntaxNode,input, index...(index + 7))
                @index += 7
              else
                terminal_parse_failure("deleter")
                r4 = nil
              end
              if r4
                r0 = r4
              else
                if has_terminal?("legacycaller", false, index)
                  r5 = instantiate_node(SyntaxNode,input, index...(index + 12))
                  @index += 12
                else
                  terminal_parse_failure("legacycaller")
                  r5 = nil
                end
                if r5
                  r0 = r5
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end

        node_cache[:Special][start_index] = r0

        r0
      end

      module OperationRest0
        def type
          elements[0]
        end

        def ws1
          elements[1]
        end

        def optional_id
          elements[2]
        end

        def ws2
          elements[3]
        end

        def ws3
          elements[5]
        end

        def args
          elements[6]
        end

        def ws4
          elements[7]
        end

        def ws5
          elements[9]
        end

        def raises
          elements[10]
        end

        def ws6
          elements[11]
        end

      end

      def _nt_OperationRest
        start_index = index
        if node_cache[:OperationRest].has_key?(index)
          cached = node_cache[:OperationRest][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_ReturnType
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            r3 = _nt_OptionalIdentifier
            s0 << r3
            if r3
              r4 = _nt_ws
              s0 << r4
              if r4
                if has_terminal?("(", false, index)
                  r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("(")
                  r5 = nil
                end
                s0 << r5
                if r5
                  r6 = _nt_ws
                  s0 << r6
                  if r6
                    r7 = _nt_ArgumentList
                    s0 << r7
                    if r7
                      r8 = _nt_ws
                      s0 << r8
                      if r8
                        if has_terminal?(")", false, index)
                          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure(")")
                          r9 = nil
                        end
                        s0 << r9
                        if r9
                          r10 = _nt_ws
                          s0 << r10
                          if r10
                            r11 = _nt_Raises
                            s0 << r11
                            if r11
                              r12 = _nt_ws
                              s0 << r12
                              if r12
                                if has_terminal?(";", false, index)
                                  r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                  @index += 1
                                else
                                  terminal_parse_failure(";")
                                  r13 = nil
                                end
                                s0 << r13
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::Operation,input, i0...index, s0)
          r0.extend(OperationRest0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:OperationRest][start_index] = r0

        r0
      end

      def _nt_OptionalIdentifier
        start_index = index
        if node_cache[:OptionalIdentifier].has_key?(index)
          cached = node_cache[:OptionalIdentifier][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        r1 = _nt_identifier
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:OptionalIdentifier][start_index] = r0

        r0
      end

      module Raises0
        def ExceptionList
          elements[1]
        end
      end

      def _nt_Raises
        start_index = index
        if node_cache[:Raises].has_key?(index)
          cached = node_cache[:Raises][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        if has_terminal?("raises", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
          @index += 6
        else
          terminal_parse_failure("raises")
          r2 = nil
        end
        s1 << r2
        if r2
          r3 = _nt_ExceptionList
          s1 << r3
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(Raises0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:Raises][start_index] = r0

        r0
      end

      module ExceptionList0
        def ScopedNameList
          elements[1]
        end

      end

      def _nt_ExceptionList
        start_index = index
        if node_cache[:ExceptionList].has_key?(index)
          cached = node_cache[:ExceptionList][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("(", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("(")
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_ScopedNameList
          s0 << r2
          if r2
            if has_terminal?(")", false, index)
              r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(")")
              r3 = nil
            end
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(ExceptionList0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:ExceptionList][start_index] = r0

        r0
      end

      module ArgumentList0
        def arg
          elements[0]
        end

        def ws
          elements[1]
        end

        def args
          elements[2]
        end
      end

      def _nt_ArgumentList
        start_index = index
        if node_cache[:ArgumentList].has_key?(index)
          cached = node_cache[:ArgumentList][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        r2 = _nt_Argument
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            r4 = _nt_Arguments
            s1 << r4
          end
        end
        if s1.last
          r1 = instantiate_node(ParseTree::ArgumentList,input, i1...index, s1)
          r1.extend(ArgumentList0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:ArgumentList][start_index] = r0

        r0
      end

      module Arguments0
        def ws1
          elements[1]
        end

        def arg
          elements[2]
        end

        def ws2
          elements[3]
        end

        def args
          elements[4]
        end
      end

      def _nt_Arguments
        start_index = index
        if node_cache[:Arguments].has_key?(index)
          cached = node_cache[:Arguments][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        if has_terminal?(",", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(",")
          r2 = nil
        end
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            r4 = _nt_Argument
            s1 << r4
            if r4
              r5 = _nt_ws
              s1 << r5
              if r5
                r6 = _nt_Arguments
                s1 << r6
              end
            end
          end
        end
        if s1.last
          r1 = instantiate_node(ParseTree::ArgumentList,input, i1...index, s1)
          r1.extend(Arguments0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:Arguments][start_index] = r0

        r0
      end

      module Argument0
        def eal
          elements[0]
        end

        def ws1
          elements[1]
        end

        def ws2
          elements[3]
        end

        def arg
          elements[4]
        end
      end

      def _nt_Argument
        start_index = index
        if node_cache[:Argument].has_key?(index)
          cached = node_cache[:Argument][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_ExtendedAttributeList
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            if has_terminal?("in", false, index)
              r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure("in")
              r4 = nil
            end
            if r4
              r3 = r4
            else
              r3 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r3
            if r3
              r5 = _nt_ws
              s0 << r5
              if r5
                r6 = _nt_OptionalOrRequiredArgument
                s0 << r6
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::Argument,input, i0...index, s0)
          r0.extend(Argument0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:Argument][start_index] = r0

        r0
      end

      module OptionalOrRequiredArgument0
        def optional
          elements[0]
        end

        def ws1
          elements[1]
        end

        def type
          elements[2]
        end

        def ws2
          elements[3]
        end

        def name
          elements[4]
        end

        def ws3
          elements[5]
        end

        def default
          elements[6]
        end
      end

      module OptionalOrRequiredArgument1
        def type
          elements[0]
        end

        def ws1
          elements[1]
        end

        def variadic
          elements[2]
        end

        def ws2
          elements[3]
        end

        def name
          elements[4]
        end
      end

      def _nt_OptionalOrRequiredArgument
        start_index = index
        if node_cache[:OptionalOrRequiredArgument].has_key?(index)
          cached = node_cache[:OptionalOrRequiredArgument][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        i1, s1 = index, []
        if has_terminal?("optional", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 8))
          @index += 8
        else
          terminal_parse_failure("optional")
          r2 = nil
        end
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            r4 = _nt_Type
            s1 << r4
            if r4
              r5 = _nt_ws
              s1 << r5
              if r5
                r6 = _nt_ArgumentName
                s1 << r6
                if r6
                  r7 = _nt_ws
                  s1 << r7
                  if r7
                    r8 = _nt_Default
                    s1 << r8
                  end
                end
              end
            end
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(OptionalOrRequiredArgument0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          i9, s9 = index, []
          r10 = _nt_Type
          s9 << r10
          if r10
            r11 = _nt_ws
            s9 << r11
            if r11
              r12 = _nt_Ellipsis
              s9 << r12
              if r12
                r13 = _nt_ws
                s9 << r13
                if r13
                  r14 = _nt_ArgumentName
                  s9 << r14
                end
              end
            end
          end
          if s9.last
            r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
            r9.extend(OptionalOrRequiredArgument1)
          else
            @index = i9
            r9 = nil
          end
          if r9
            r0 = r9
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:OptionalOrRequiredArgument][start_index] = r0

        r0
      end

      module ArgumentName0
        def build() text_value end
      end

      def _nt_ArgumentName
        start_index = index
        if node_cache[:ArgumentName].has_key?(index)
          cached = node_cache[:ArgumentName][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_ArgumentNameKeyword
        r1.extend(ArgumentName0)
        if r1
          r0 = r1
        else
          r2 = _nt_identifier
          if r2
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:ArgumentName][start_index] = r0

        r0
      end

      def _nt_ArgumentNameKeyword
        start_index = index
        if node_cache[:ArgumentNameKeyword].has_key?(index)
          cached = node_cache[:ArgumentNameKeyword][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        if has_terminal?("attribute", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 9))
          @index += 9
        else
          terminal_parse_failure("attribute")
          r1 = nil
        end
        if r1
          r0 = r1
        else
          if has_terminal?("callback", false, index)
            r2 = instantiate_node(SyntaxNode,input, index...(index + 8))
            @index += 8
          else
            terminal_parse_failure("callback")
            r2 = nil
          end
          if r2
            r0 = r2
          else
            if has_terminal?("const", false, index)
              r3 = instantiate_node(SyntaxNode,input, index...(index + 5))
              @index += 5
            else
              terminal_parse_failure("const")
              r3 = nil
            end
            if r3
              r0 = r3
            else
              if has_terminal?("creator", false, index)
                r4 = instantiate_node(SyntaxNode,input, index...(index + 7))
                @index += 7
              else
                terminal_parse_failure("creator")
                r4 = nil
              end
              if r4
                r0 = r4
              else
                if has_terminal?("deleter", false, index)
                  r5 = instantiate_node(SyntaxNode,input, index...(index + 7))
                  @index += 7
                else
                  terminal_parse_failure("deleter")
                  r5 = nil
                end
                if r5
                  r0 = r5
                else
                  if has_terminal?("dictionary", false, index)
                    r6 = instantiate_node(SyntaxNode,input, index...(index + 10))
                    @index += 10
                  else
                    terminal_parse_failure("dictionary")
                    r6 = nil
                  end
                  if r6
                    r0 = r6
                  else
                    if has_terminal?("enum", false, index)
                      r7 = instantiate_node(SyntaxNode,input, index...(index + 4))
                      @index += 4
                    else
                      terminal_parse_failure("enum")
                      r7 = nil
                    end
                    if r7
                      r0 = r7
                    else
                      if has_terminal?("exception", false, index)
                        r8 = instantiate_node(SyntaxNode,input, index...(index + 9))
                        @index += 9
                      else
                        terminal_parse_failure("exception")
                        r8 = nil
                      end
                      if r8
                        r0 = r8
                      else
                        if has_terminal?("getter", false, index)
                          r9 = instantiate_node(SyntaxNode,input, index...(index + 6))
                          @index += 6
                        else
                          terminal_parse_failure("getter")
                          r9 = nil
                        end
                        if r9
                          r0 = r9
                        else
                          if has_terminal?("implements", false, index)
                            r10 = instantiate_node(SyntaxNode,input, index...(index + 10))
                            @index += 10
                          else
                            terminal_parse_failure("implements")
                            r10 = nil
                          end
                          if r10
                            r0 = r10
                          else
                            if has_terminal?("inherit", false, index)
                              r11 = instantiate_node(SyntaxNode,input, index...(index + 7))
                              @index += 7
                            else
                              terminal_parse_failure("inherit")
                              r11 = nil
                            end
                            if r11
                              r0 = r11
                            else
                              if has_terminal?("interface", false, index)
                                r12 = instantiate_node(SyntaxNode,input, index...(index + 9))
                                @index += 9
                              else
                                terminal_parse_failure("interface")
                                r12 = nil
                              end
                              if r12
                                r0 = r12
                              else
                                if has_terminal?("legacycaller", false, index)
                                  r13 = instantiate_node(SyntaxNode,input, index...(index + 12))
                                  @index += 12
                                else
                                  terminal_parse_failure("legacycaller")
                                  r13 = nil
                                end
                                if r13
                                  r0 = r13
                                else
                                  if has_terminal?("partial", false, index)
                                    r14 = instantiate_node(SyntaxNode,input, index...(index + 7))
                                    @index += 7
                                  else
                                    terminal_parse_failure("partial")
                                    r14 = nil
                                  end
                                  if r14
                                    r0 = r14
                                  else
                                    if has_terminal?("setter", false, index)
                                      r15 = instantiate_node(SyntaxNode,input, index...(index + 6))
                                      @index += 6
                                    else
                                      terminal_parse_failure("setter")
                                      r15 = nil
                                    end
                                    if r15
                                      r0 = r15
                                    else
                                      if has_terminal?("static", false, index)
                                        r16 = instantiate_node(SyntaxNode,input, index...(index + 6))
                                        @index += 6
                                      else
                                        terminal_parse_failure("static")
                                        r16 = nil
                                      end
                                      if r16
                                        r0 = r16
                                      else
                                        if has_terminal?("stringifier", false, index)
                                          r17 = instantiate_node(SyntaxNode,input, index...(index + 11))
                                          @index += 11
                                        else
                                          terminal_parse_failure("stringifier")
                                          r17 = nil
                                        end
                                        if r17
                                          r0 = r17
                                        else
                                          if has_terminal?("typedef", false, index)
                                            r18 = instantiate_node(SyntaxNode,input, index...(index + 7))
                                            @index += 7
                                          else
                                            terminal_parse_failure("typedef")
                                            r18 = nil
                                          end
                                          if r18
                                            r0 = r18
                                          else
                                            if has_terminal?("unrestricted", false, index)
                                              r19 = instantiate_node(SyntaxNode,input, index...(index + 12))
                                              @index += 12
                                            else
                                              terminal_parse_failure("unrestricted")
                                              r19 = nil
                                            end
                                            if r19
                                              r0 = r19
                                            else
                                              @index = i0
                                              r0 = nil
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end

        node_cache[:ArgumentNameKeyword][start_index] = r0

        r0
      end

      def _nt_Ellipsis
        start_index = index
        if node_cache[:Ellipsis].has_key?(index)
          cached = node_cache[:Ellipsis][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        if has_terminal?("...", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure("...")
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:Ellipsis][start_index] = r0

        r0
      end

      def _nt_ExceptionMember
        start_index = index
        if node_cache[:ExceptionMember].has_key?(index)
          cached = node_cache[:ExceptionMember][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_Const
        if r1
          r0 = r1
        else
          r2 = _nt_ExceptionField
          if r2
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:ExceptionMember][start_index] = r0

        r0
      end

      module ExceptionField0
        def type
          elements[0]
        end

        def ws1
          elements[1]
        end

        def id
          elements[2]
        end

        def ws2
          elements[3]
        end

      end

      def _nt_ExceptionField
        start_index = index
        if node_cache[:ExceptionField].has_key?(index)
          cached = node_cache[:ExceptionField][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_Type
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            r3 = _nt_identifier
            s0 << r3
            if r3
              r4 = _nt_ws
              s0 << r4
              if r4
                if has_terminal?(";", false, index)
                  r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(";")
                  r5 = nil
                end
                s0 << r5
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::ExceptionField,input, i0...index, s0)
          r0.extend(ExceptionField0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:ExceptionField][start_index] = r0

        r0
      end

      module ExtendedAttributeList0
        def ws1
          elements[1]
        end

        def attribute
          elements[2]
        end

        def ws2
          elements[3]
        end

        def attributes
          elements[4]
        end

        def ws3
          elements[5]
        end

      end

      def _nt_ExtendedAttributeList
        start_index = index
        if node_cache[:ExtendedAttributeList].has_key?(index)
          cached = node_cache[:ExtendedAttributeList][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        if has_terminal?("[", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("[")
          r2 = nil
        end
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            r4 = _nt_ExtendedAttribute
            s1 << r4
            if r4
              r5 = _nt_ws
              s1 << r5
              if r5
                r6 = _nt_ExtendedAttributes
                s1 << r6
                if r6
                  r7 = _nt_ws
                  s1 << r7
                  if r7
                    if has_terminal?("]", false, index)
                      r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure("]")
                      r8 = nil
                    end
                    s1 << r8
                  end
                end
              end
            end
          end
        end
        if s1.last
          r1 = instantiate_node(ParseTree::ExtendedAttributeList,input, i1...index, s1)
          r1.extend(ExtendedAttributeList0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:ExtendedAttributeList][start_index] = r0

        r0
      end

      module ExtendedAttributes0
        def ws1
          elements[1]
        end

        def attribute
          elements[2]
        end

        def ws2
          elements[3]
        end

        def attributes
          elements[4]
        end
      end

      def _nt_ExtendedAttributes
        start_index = index
        if node_cache[:ExtendedAttributes].has_key?(index)
          cached = node_cache[:ExtendedAttributes][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        if has_terminal?(",", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(",")
          r2 = nil
        end
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            r4 = _nt_ExtendedAttribute
            s1 << r4
            if r4
              r5 = _nt_ws
              s1 << r5
              if r5
                r6 = _nt_ExtendedAttributes
                s1 << r6
              end
            end
          end
        end
        if s1.last
          r1 = instantiate_node(ParseTree::ExtendedAttributeList,input, i1...index, s1)
          r1.extend(ExtendedAttributes0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:ExtendedAttributes][start_index] = r0

        r0
      end

      def _nt_ExtendedAttribute
        start_index = index
        if node_cache[:ExtendedAttribute].has_key?(index)
          cached = node_cache[:ExtendedAttribute][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_ExtendedAttributeNamedArgList
        if r1
          r0 = r1
        else
          r2 = _nt_ExtendedAttributeIdent
          if r2
            r0 = r2
          else
            r3 = _nt_ExtendedAttributeScopedName
            if r3
              r0 = r3
            else
              r4 = _nt_ExtendedAttributeArgList
              if r4
                r0 = r4
              else
                r5 = _nt_ExtendedAttributeNoArg
                if r5
                  r0 = r5
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end

        node_cache[:ExtendedAttribute][start_index] = r0

        r0
      end

      module ExtendedAttributeNoArg0
        def build(parent)
          Ast::ExtendedAttribute.new(text_value)
        end
      end

      def _nt_ExtendedAttributeNoArg
        start_index = index
        if node_cache[:ExtendedAttributeNoArg].has_key?(index)
          cached = node_cache[:ExtendedAttributeNoArg][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        r0 = _nt_identifier
        r0.extend(ExtendedAttributeNoArg0)

        node_cache[:ExtendedAttributeNoArg][start_index] = r0

        r0
      end

      module ExtendedAttributeArgList0
        def name
          elements[0]
        end

        def ws1
          elements[2]
        end

        def args
          elements[3]
        end

        def ws2
          elements[4]
        end

      end

      def _nt_ExtendedAttributeArgList
        start_index = index
        if node_cache[:ExtendedAttributeArgList].has_key?(index)
          cached = node_cache[:ExtendedAttributeArgList][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_identifier
        s0 << r1
        if r1
          if has_terminal?("(", false, index)
            r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("(")
            r2 = nil
          end
          s0 << r2
          if r2
            r3 = _nt_ws
            s0 << r3
            if r3
              r4 = _nt_ArgumentList
              s0 << r4
              if r4
                r5 = _nt_ws
                s0 << r5
                if r5
                  if has_terminal?(")", false, index)
                    r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(")")
                    r6 = nil
                  end
                  s0 << r6
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::ExtendedAttributeArgList,input, i0...index, s0)
          r0.extend(ExtendedAttributeArgList0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:ExtendedAttributeArgList][start_index] = r0

        r0
      end

      module ExtendedAttributeScopedName0
        def key
          elements[0]
        end

        def scoped_name
          elements[2]
        end
      end

      def _nt_ExtendedAttributeScopedName
        start_index = index
        if node_cache[:ExtendedAttributeScopedName].has_key?(index)
          cached = node_cache[:ExtendedAttributeScopedName][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_identifier
        s0 << r1
        if r1
          if has_terminal?("=", false, index)
            r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("=")
            r2 = nil
          end
          s0 << r2
          if r2
            r3 = _nt_ScopedName
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::ExtendedAttributeScopedName,input, i0...index, s0)
          r0.extend(ExtendedAttributeScopedName0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:ExtendedAttributeScopedName][start_index] = r0

        r0
      end

      module ExtendedAttributeIdent0
        def key
          elements[0]
        end

        def value
          elements[2]
        end

      end

      def _nt_ExtendedAttributeIdent
        start_index = index
        if node_cache[:ExtendedAttributeIdent].has_key?(index)
          cached = node_cache[:ExtendedAttributeIdent][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_identifier
        s0 << r1
        if r1
          if has_terminal?("=", false, index)
            r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("=")
            r2 = nil
          end
          s0 << r2
          if r2
            r3 = _nt_identifier
            s0 << r3
            if r3
              i4 = index
              if has_terminal?("::", false, index)
                r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure("::")
                r5 = nil
              end
              if r5
                r4 = nil
              else
                @index = i4
                r4 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r4
            end
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::ExtendedAttributeIdent,input, i0...index, s0)
          r0.extend(ExtendedAttributeIdent0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:ExtendedAttributeIdent][start_index] = r0

        r0
      end

      module ExtendedAttributeNamedArgList0
        def name
          elements[0]
        end

        def ws1
          elements[2]
        end

        def args
          elements[3]
        end

        def ws2
          elements[4]
        end

      end

      module ExtendedAttributeNamedArgList1
        def key
          elements[0]
        end

        def value
          elements[2]
        end
      end

      def _nt_ExtendedAttributeNamedArgList
        start_index = index
        if node_cache[:ExtendedAttributeNamedArgList].has_key?(index)
          cached = node_cache[:ExtendedAttributeNamedArgList][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_identifier
        s0 << r1
        if r1
          if has_terminal?("=", false, index)
            r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("=")
            r2 = nil
          end
          s0 << r2
          if r2
            i3, s3 = index, []
            r4 = _nt_identifier
            s3 << r4
            if r4
              if has_terminal?("(", false, index)
                r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("(")
                r5 = nil
              end
              s3 << r5
              if r5
                r6 = _nt_ws
                s3 << r6
                if r6
                  r7 = _nt_ArgumentList
                  s3 << r7
                  if r7
                    r8 = _nt_ws
                    s3 << r8
                    if r8
                      if has_terminal?(")", false, index)
                        r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure(")")
                        r9 = nil
                      end
                      s3 << r9
                    end
                  end
                end
              end
            end
            if s3.last
              r3 = instantiate_node(ParseTree::ExtendedAttributeArgList,input, i3...index, s3)
              r3.extend(ExtendedAttributeNamedArgList0)
            else
              @index = i3
              r3 = nil
            end
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::ExtendedAttributeNamedArgList,input, i0...index, s0)
          r0.extend(ExtendedAttributeNamedArgList1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:ExtendedAttributeNamedArgList][start_index] = r0

        r0
      end

      def _nt_Other
        start_index = index
        if node_cache[:Other].has_key?(index)
          cached = node_cache[:Other][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_integer
        if r1
          r0 = r1
        else
          r2 = _nt_float
          if r2
            r0 = r2
          else
            r3 = _nt_identifier
            if r3
              r0 = r3
            else
              r4 = _nt_string
              if r4
                r0 = r4
              else
                r5 = _nt_other
                if r5
                  r0 = r5
                else
                  if has_terminal?("...", false, index)
                    r6 = instantiate_node(SyntaxNode,input, index...(index + 3))
                    @index += 3
                  else
                    terminal_parse_failure("...")
                    r6 = nil
                  end
                  if r6
                    r0 = r6
                  else
                    if has_terminal?(":", false, index)
                      r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(":")
                      r7 = nil
                    end
                    if r7
                      r0 = r7
                    else
                      if has_terminal?("::", false, index)
                        r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
                        @index += 2
                      else
                        terminal_parse_failure("::")
                        r8 = nil
                      end
                      if r8
                        r0 = r8
                      else
                        if has_terminal?(";", false, index)
                          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure(";")
                          r9 = nil
                        end
                        if r9
                          r0 = r9
                        else
                          if has_terminal?("<", false, index)
                            r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                            @index += 1
                          else
                            terminal_parse_failure("<")
                            r10 = nil
                          end
                          if r10
                            r0 = r10
                          else
                            if has_terminal?("=", false, index)
                              r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure("=")
                              r11 = nil
                            end
                            if r11
                              r0 = r11
                            else
                              if has_terminal?(">", false, index)
                                r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                @index += 1
                              else
                                terminal_parse_failure(">")
                                r12 = nil
                              end
                              if r12
                                r0 = r12
                              else
                                if has_terminal?("?", false, index)
                                  r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                  @index += 1
                                else
                                  terminal_parse_failure("?")
                                  r13 = nil
                                end
                                if r13
                                  r0 = r13
                                else
                                  if has_terminal?("false", false, index)
                                    r14 = instantiate_node(SyntaxNode,input, index...(index + 5))
                                    @index += 5
                                  else
                                    terminal_parse_failure("false")
                                    r14 = nil
                                  end
                                  if r14
                                    r0 = r14
                                  else
                                    if has_terminal?("object", false, index)
                                      r15 = instantiate_node(SyntaxNode,input, index...(index + 6))
                                      @index += 6
                                    else
                                      terminal_parse_failure("object")
                                      r15 = nil
                                    end
                                    if r15
                                      r0 = r15
                                    else
                                      if has_terminal?("true", false, index)
                                        r16 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                        @index += 4
                                      else
                                        terminal_parse_failure("true")
                                        r16 = nil
                                      end
                                      if r16
                                        r0 = r16
                                      else
                                        if has_terminal?("any", false, index)
                                          r17 = instantiate_node(SyntaxNode,input, index...(index + 3))
                                          @index += 3
                                        else
                                          terminal_parse_failure("any")
                                          r17 = nil
                                        end
                                        if r17
                                          r0 = r17
                                        else
                                          if has_terminal?("attribute", false, index)
                                            r18 = instantiate_node(SyntaxNode,input, index...(index + 9))
                                            @index += 9
                                          else
                                            terminal_parse_failure("attribute")
                                            r18 = nil
                                          end
                                          if r18
                                            r0 = r18
                                          else
                                            if has_terminal?("boolean", false, index)
                                              r19 = instantiate_node(SyntaxNode,input, index...(index + 7))
                                              @index += 7
                                            else
                                              terminal_parse_failure("boolean")
                                              r19 = nil
                                            end
                                            if r19
                                              r0 = r19
                                            else
                                              if has_terminal?("caller", false, index)
                                                r20 = instantiate_node(SyntaxNode,input, index...(index + 6))
                                                @index += 6
                                              else
                                                terminal_parse_failure("caller")
                                                r20 = nil
                                              end
                                              if r20
                                                r0 = r20
                                              else
                                                if has_terminal?("const", false, index)
                                                  r21 = instantiate_node(SyntaxNode,input, index...(index + 5))
                                                  @index += 5
                                                else
                                                  terminal_parse_failure("const")
                                                  r21 = nil
                                                end
                                                if r21
                                                  r0 = r21
                                                else
                                                  if has_terminal?("creator", false, index)
                                                    r22 = instantiate_node(SyntaxNode,input, index...(index + 7))
                                                    @index += 7
                                                  else
                                                    terminal_parse_failure("creator")
                                                    r22 = nil
                                                  end
                                                  if r22
                                                    r0 = r22
                                                  else
                                                    if has_terminal?("deleter", false, index)
                                                      r23 = instantiate_node(SyntaxNode,input, index...(index + 7))
                                                      @index += 7
                                                    else
                                                      terminal_parse_failure("deleter")
                                                      r23 = nil
                                                    end
                                                    if r23
                                                      r0 = r23
                                                    else
                                                      if has_terminal?("double", false, index)
                                                        r24 = instantiate_node(SyntaxNode,input, index...(index + 6))
                                                        @index += 6
                                                      else
                                                        terminal_parse_failure("double")
                                                        r24 = nil
                                                      end
                                                      if r24
                                                        r0 = r24
                                                      else
                                                        if has_terminal?("exception", false, index)
                                                          r25 = instantiate_node(SyntaxNode,input, index...(index + 9))
                                                          @index += 9
                                                        else
                                                          terminal_parse_failure("exception")
                                                          r25 = nil
                                                        end
                                                        if r25
                                                          r0 = r25
                                                        else
                                                          if has_terminal?("float", false, index)
                                                            r26 = instantiate_node(SyntaxNode,input, index...(index + 5))
                                                            @index += 5
                                                          else
                                                            terminal_parse_failure("float")
                                                            r26 = nil
                                                          end
                                                          if r26
                                                            r0 = r26
                                                          else
                                                            if has_terminal?("getraises", false, index)
                                                              r27 = instantiate_node(SyntaxNode,input, index...(index + 9))
                                                              @index += 9
                                                            else
                                                              terminal_parse_failure("getraises")
                                                              r27 = nil
                                                            end
                                                            if r27
                                                              r0 = r27
                                                            else
                                                              if has_terminal?("getter", false, index)
                                                                r28 = instantiate_node(SyntaxNode,input, index...(index + 6))
                                                                @index += 6
                                                              else
                                                                terminal_parse_failure("getter")
                                                                r28 = nil
                                                              end
                                                              if r28
                                                                r0 = r28
                                                              else
                                                                if has_terminal?("implements", false, index)
                                                                  r29 = instantiate_node(SyntaxNode,input, index...(index + 10))
                                                                  @index += 10
                                                                else
                                                                  terminal_parse_failure("implements")
                                                                  r29 = nil
                                                                end
                                                                if r29
                                                                  r0 = r29
                                                                else
                                                                  if has_terminal?("in", false, index)
                                                                    r30 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                                                    @index += 2
                                                                  else
                                                                    terminal_parse_failure("in")
                                                                    r30 = nil
                                                                  end
                                                                  if r30
                                                                    r0 = r30
                                                                  else
                                                                    if has_terminal?("interface", false, index)
                                                                      r31 = instantiate_node(SyntaxNode,input, index...(index + 9))
                                                                      @index += 9
                                                                    else
                                                                      terminal_parse_failure("interface")
                                                                      r31 = nil
                                                                    end
                                                                    if r31
                                                                      r0 = r31
                                                                    else
                                                                      if has_terminal?("long", false, index)
                                                                        r32 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                                                        @index += 4
                                                                      else
                                                                        terminal_parse_failure("long")
                                                                        r32 = nil
                                                                      end
                                                                      if r32
                                                                        r0 = r32
                                                                      else
                                                                        if has_terminal?("module", false, index)
                                                                          r33 = instantiate_node(SyntaxNode,input, index...(index + 6))
                                                                          @index += 6
                                                                        else
                                                                          terminal_parse_failure("module")
                                                                          r33 = nil
                                                                        end
                                                                        if r33
                                                                          r0 = r33
                                                                        else
                                                                          if has_terminal?("octet", false, index)
                                                                            r34 = instantiate_node(SyntaxNode,input, index...(index + 5))
                                                                            @index += 5
                                                                          else
                                                                            terminal_parse_failure("octet")
                                                                            r34 = nil
                                                                          end
                                                                          if r34
                                                                            r0 = r34
                                                                          else
                                                                            if has_terminal?("omittable", false, index)
                                                                              r35 = instantiate_node(SyntaxNode,input, index...(index + 9))
                                                                              @index += 9
                                                                            else
                                                                              terminal_parse_failure("omittable")
                                                                              r35 = nil
                                                                            end
                                                                            if r35
                                                                              r0 = r35
                                                                            else
                                                                              if has_terminal?("optional", false, index)
                                                                                r36 = instantiate_node(SyntaxNode,input, index...(index + 8))
                                                                                @index += 8
                                                                              else
                                                                                terminal_parse_failure("optional")
                                                                                r36 = nil
                                                                              end
                                                                              if r36
                                                                                r0 = r36
                                                                              else
                                                                                if has_terminal?("raises", false, index)
                                                                                  r37 = instantiate_node(SyntaxNode,input, index...(index + 6))
                                                                                  @index += 6
                                                                                else
                                                                                  terminal_parse_failure("raises")
                                                                                  r37 = nil
                                                                                end
                                                                                if r37
                                                                                  r0 = r37
                                                                                else
                                                                                  if has_terminal?("sequence", false, index)
                                                                                    r38 = instantiate_node(SyntaxNode,input, index...(index + 8))
                                                                                    @index += 8
                                                                                  else
                                                                                    terminal_parse_failure("sequence")
                                                                                    r38 = nil
                                                                                  end
                                                                                  if r38
                                                                                    r0 = r38
                                                                                  else
                                                                                    if has_terminal?("setraises", false, index)
                                                                                      r39 = instantiate_node(SyntaxNode,input, index...(index + 9))
                                                                                      @index += 9
                                                                                    else
                                                                                      terminal_parse_failure("setraises")
                                                                                      r39 = nil
                                                                                    end
                                                                                    if r39
                                                                                      r0 = r39
                                                                                    else
                                                                                      if has_terminal?("setter", false, index)
                                                                                        r40 = instantiate_node(SyntaxNode,input, index...(index + 6))
                                                                                        @index += 6
                                                                                      else
                                                                                        terminal_parse_failure("setter")
                                                                                        r40 = nil
                                                                                      end
                                                                                      if r40
                                                                                        r0 = r40
                                                                                      else
                                                                                        if has_terminal?("short", false, index)
                                                                                          r41 = instantiate_node(SyntaxNode,input, index...(index + 5))
                                                                                          @index += 5
                                                                                        else
                                                                                          terminal_parse_failure("short")
                                                                                          r41 = nil
                                                                                        end
                                                                                        if r41
                                                                                          r0 = r41
                                                                                        else
                                                                                          if has_terminal?("DOMString", false, index)
                                                                                            r42 = instantiate_node(SyntaxNode,input, index...(index + 9))
                                                                                            @index += 9
                                                                                          else
                                                                                            terminal_parse_failure("DOMString")
                                                                                            r42 = nil
                                                                                          end
                                                                                          if r42
                                                                                            r0 = r42
                                                                                          else
                                                                                            if has_terminal?("stringifier", false, index)
                                                                                              r43 = instantiate_node(SyntaxNode,input, index...(index + 11))
                                                                                              @index += 11
                                                                                            else
                                                                                              terminal_parse_failure("stringifier")
                                                                                              r43 = nil
                                                                                            end
                                                                                            if r43
                                                                                              r0 = r43
                                                                                            else
                                                                                              if has_terminal?("typedef", false, index)
                                                                                                r44 = instantiate_node(SyntaxNode,input, index...(index + 7))
                                                                                                @index += 7
                                                                                              else
                                                                                                terminal_parse_failure("typedef")
                                                                                                r44 = nil
                                                                                              end
                                                                                              if r44
                                                                                                r0 = r44
                                                                                              else
                                                                                                if has_terminal?("unsigned", false, index)
                                                                                                  r45 = instantiate_node(SyntaxNode,input, index...(index + 8))
                                                                                                  @index += 8
                                                                                                else
                                                                                                  terminal_parse_failure("unsigned")
                                                                                                  r45 = nil
                                                                                                end
                                                                                                if r45
                                                                                                  r0 = r45
                                                                                                else
                                                                                                  if has_terminal?("void", false, index)
                                                                                                    r46 = instantiate_node(SyntaxNode,input, index...(index + 4))
                                                                                                    @index += 4
                                                                                                  else
                                                                                                    terminal_parse_failure("void")
                                                                                                    r46 = nil
                                                                                                  end
                                                                                                  if r46
                                                                                                    r0 = r46
                                                                                                  else
                                                                                                    @index = i0
                                                                                                    r0 = nil
                                                                                                  end
                                                                                                end
                                                                                              end
                                                                                            end
                                                                                          end
                                                                                        end
                                                                                      end
                                                                                    end
                                                                                  end
                                                                                end
                                                                              end
                                                                            end
                                                                          end
                                                                        end
                                                                      end
                                                                    end
                                                                  end
                                                                end
                                                              end
                                                            end
                                                          end
                                                        end
                                                      end
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end

        node_cache[:Other][start_index] = r0

        r0
      end

      def _nt_OtherOrComma
        start_index = index
        if node_cache[:OtherOrComma].has_key?(index)
          cached = node_cache[:OtherOrComma][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_Other
        if r1
          r0 = r1
        else
          if has_terminal?(",", false, index)
            r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(",")
            r2 = nil
          end
          if r2
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:OtherOrComma][start_index] = r0

        r0
      end

      module Type0
        def type
          elements[0]
        end

        def suffix
          elements[1]
        end
      end

      def _nt_Type
        start_index = index
        if node_cache[:Type].has_key?(index)
          cached = node_cache[:Type][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_SingleType
        if r1
          r0 = r1
        else
          i2, s2 = index, []
          r3 = _nt_UnionType
          s2 << r3
          if r3
            r4 = _nt_TypeSuffix
            s2 << r4
          end
          if s2.last
            r2 = instantiate_node(ParseTree::Type,input, i2...index, s2)
            r2.extend(Type0)
          else
            @index = i2
            r2 = nil
          end
          if r2
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:Type][start_index] = r0

        r0
      end

      module SingleType0
        def type
          elements[0]
        end

        def suffix
          elements[1]
        end
      end

      def _nt_SingleType
        start_index = index
        if node_cache[:SingleType].has_key?(index)
          cached = node_cache[:SingleType][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_NonAnyType
        if r1
          r0 = r1
        else
          i2, s2 = index, []
          if has_terminal?("any", false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
            @index += 3
          else
            terminal_parse_failure("any")
            r3 = nil
          end
          s2 << r3
          if r3
            r4 = _nt_TypeSuffixStartingWithArray
            s2 << r4
          end
          if s2.last
            r2 = instantiate_node(ParseTree::Type,input, i2...index, s2)
            r2.extend(SingleType0)
          else
            @index = i2
            r2 = nil
          end
          if r2
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:SingleType][start_index] = r0

        r0
      end

      module UnionType0
        def ws1
          elements[1]
        end

        def UnionMemberType1
          elements[2]
        end

        def ws2
          elements[3]
        end

        def ws3
          elements[5]
        end

        def UnionMemberType2
          elements[6]
        end

        def ws4
          elements[7]
        end

        def UnionMemberTypes
          elements[8]
        end

        def ws5
          elements[9]
        end

      end

      def _nt_UnionType
        start_index = index
        if node_cache[:UnionType].has_key?(index)
          cached = node_cache[:UnionType][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("(", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("(")
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            r3 = _nt_UnionMemberType
            s0 << r3
            if r3
              r4 = _nt_ws
              s0 << r4
              if r4
                if has_terminal?("or", false, index)
                  r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
                  @index += 2
                else
                  terminal_parse_failure("or")
                  r5 = nil
                end
                s0 << r5
                if r5
                  r6 = _nt_ws
                  s0 << r6
                  if r6
                    r7 = _nt_UnionMemberType
                    s0 << r7
                    if r7
                      r8 = _nt_ws
                      s0 << r8
                      if r8
                        r9 = _nt_UnionMemberTypes
                        s0 << r9
                        if r9
                          r10 = _nt_ws
                          s0 << r10
                          if r10
                            if has_terminal?(")", false, index)
                              r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure(")")
                              r11 = nil
                            end
                            s0 << r11
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(UnionType0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:UnionType][start_index] = r0

        r0
      end

      module UnionMemberType0
        def type
          elements[0]
        end

        def suffix
          elements[1]
        end
      end

      module UnionMemberType1
        def type
          elements[0]
        end

        def suffix
          elements[1]
        end
      end

      def _nt_UnionMemberType
        start_index = index
        if node_cache[:UnionMemberType].has_key?(index)
          cached = node_cache[:UnionMemberType][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_NonAnyType
        if r1
          r0 = r1
        else
          i2, s2 = index, []
          r3 = _nt_UnionType
          s2 << r3
          if r3
            r4 = _nt_TypeSuffix
            s2 << r4
          end
          if s2.last
            r2 = instantiate_node(ParseTree::Type,input, i2...index, s2)
            r2.extend(UnionMemberType0)
          else
            @index = i2
            r2 = nil
          end
          if r2
            r0 = r2
          else
            i5, s5 = index, []
            if has_terminal?("any", false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 3))
              @index += 3
            else
              terminal_parse_failure("any")
              r6 = nil
            end
            s5 << r6
            if r6
              r7 = _nt_TypeSuffixStartingWithArray
              s5 << r7
            end
            if s5.last
              r5 = instantiate_node(ParseTree::Type,input, i5...index, s5)
              r5.extend(UnionMemberType1)
            else
              @index = i5
              r5 = nil
            end
            if r5
              r0 = r5
            else
              @index = i0
              r0 = nil
            end
          end
        end

        node_cache[:UnionMemberType][start_index] = r0

        r0
      end

      module UnionMemberTypes0
        def ws1
          elements[1]
        end

        def UnionMemberType
          elements[2]
        end

        def ws2
          elements[3]
        end

        def UnionMemberTypes
          elements[4]
        end
      end

      def _nt_UnionMemberTypes
        start_index = index
        if node_cache[:UnionMemberTypes].has_key?(index)
          cached = node_cache[:UnionMemberTypes][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        if has_terminal?("or", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("or")
          r2 = nil
        end
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            r4 = _nt_UnionMemberType
            s1 << r4
            if r4
              r5 = _nt_ws
              s1 << r5
              if r5
                r6 = _nt_UnionMemberTypes
                s1 << r6
              end
            end
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(UnionMemberTypes0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:UnionMemberTypes][start_index] = r0

        r0
      end

      module NonAnyType0
        def type
          elements[0]
        end

        def suffix
          elements[1]
        end
      end

      module NonAnyType1
        def type
          elements[0]
        end

        def suffix
          elements[1]
        end

      end

      module NonAnyType2
        def ws1
          elements[1]
        end

        def ws2
          elements[3]
        end

        def type
          elements[4]
        end

        def ws3
          elements[5]
        end

        def null
          elements[7]
        end
      end

      module NonAnyType3
        def type
          elements[0]
        end

        def suffix
          elements[1]
        end
      end

      module NonAnyType4
        def type
          elements[0]
        end

        def suffix
          elements[1]
        end
      end

      module NonAnyType5
        def type
          elements[0]
        end

        def suffix
          elements[1]
        end
      end

      def _nt_NonAnyType
        start_index = index
        if node_cache[:NonAnyType].has_key?(index)
          cached = node_cache[:NonAnyType][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        i1, s1 = index, []
        r2 = _nt_PrimitiveType
        s1 << r2
        if r2
          r3 = _nt_TypeSuffix
          s1 << r3
        end
        if s1.last
          r1 = instantiate_node(ParseTree::Type,input, i1...index, s1)
          r1.extend(NonAnyType0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          i4, s4 = index, []
          if has_terminal?("DOMString", false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 9))
            @index += 9
          else
            terminal_parse_failure("DOMString")
            r5 = nil
          end
          s4 << r5
          if r5
            r6 = _nt_TypeSuffix
            s4 << r6
            if r6
              i7 = index
              r8 = _nt_NonSpace
              if r8
                r7 = nil
              else
                @index = i7
                r7 = instantiate_node(SyntaxNode,input, index...index)
              end
              s4 << r7
            end
          end
          if s4.last
            r4 = instantiate_node(ParseTree::Type,input, i4...index, s4)
            r4.extend(NonAnyType1)
          else
            @index = i4
            r4 = nil
          end
          if r4
            r0 = r4
          else
            i9, s9 = index, []
            if has_terminal?("sequence", false, index)
              r10 = instantiate_node(SyntaxNode,input, index...(index + 8))
              @index += 8
            else
              terminal_parse_failure("sequence")
              r10 = nil
            end
            s9 << r10
            if r10
              r11 = _nt_ws
              s9 << r11
              if r11
                if has_terminal?("<", false, index)
                  r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("<")
                  r12 = nil
                end
                s9 << r12
                if r12
                  r13 = _nt_ws
                  s9 << r13
                  if r13
                    r14 = _nt_Type
                    s9 << r14
                    if r14
                      r15 = _nt_ws
                      s9 << r15
                      if r15
                        if has_terminal?(">", false, index)
                          r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure(">")
                          r16 = nil
                        end
                        s9 << r16
                        if r16
                          r17 = _nt_Null
                          s9 << r17
                        end
                      end
                    end
                  end
                end
              end
            end
            if s9.last
              r9 = instantiate_node(ParseTree::SequenceType,input, i9...index, s9)
              r9.extend(NonAnyType2)
            else
              @index = i9
              r9 = nil
            end
            if r9
              r0 = r9
            else
              i18, s18 = index, []
              if has_terminal?("object", false, index)
                r19 = instantiate_node(SyntaxNode,input, index...(index + 6))
                @index += 6
              else
                terminal_parse_failure("object")
                r19 = nil
              end
              s18 << r19
              if r19
                r20 = _nt_TypeSuffix
                s18 << r20
              end
              if s18.last
                r18 = instantiate_node(ParseTree::Type,input, i18...index, s18)
                r18.extend(NonAnyType3)
              else
                @index = i18
                r18 = nil
              end
              if r18
                r0 = r18
              else
                i21, s21 = index, []
                if has_terminal?("Date", false, index)
                  r22 = instantiate_node(SyntaxNode,input, index...(index + 4))
                  @index += 4
                else
                  terminal_parse_failure("Date")
                  r22 = nil
                end
                s21 << r22
                if r22
                  r23 = _nt_TypeSuffix
                  s21 << r23
                end
                if s21.last
                  r21 = instantiate_node(ParseTree::Type,input, i21...index, s21)
                  r21.extend(NonAnyType4)
                else
                  @index = i21
                  r21 = nil
                end
                if r21
                  r0 = r21
                else
                  i24, s24 = index, []
                  r25 = _nt_identifier
                  s24 << r25
                  if r25
                    r26 = _nt_TypeSuffix
                    s24 << r26
                  end
                  if s24.last
                    r24 = instantiate_node(ParseTree::Type,input, i24...index, s24)
                    r24.extend(NonAnyType5)
                  else
                    @index = i24
                    r24 = nil
                  end
                  if r24
                    r0 = r24
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end
        end

        node_cache[:NonAnyType][start_index] = r0

        r0
      end

      module ConstType0
        def PrimitiveType
          elements[0]
        end

        def Null
          elements[1]
        end
      end

      module ConstType1
        def identifier
          elements[0]
        end

        def Null
          elements[1]
        end
      end

      def _nt_ConstType
        start_index = index
        if node_cache[:ConstType].has_key?(index)
          cached = node_cache[:ConstType][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        i1, s1 = index, []
        r2 = _nt_PrimitiveType
        s1 << r2
        if r2
          r3 = _nt_Null
          s1 << r3
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(ConstType0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          i4, s4 = index, []
          r5 = _nt_identifier
          s4 << r5
          if r5
            r6 = _nt_Null
            s4 << r6
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(ConstType1)
          else
            @index = i4
            r4 = nil
          end
          if r4
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:ConstType][start_index] = r0

        r0
      end

      module PrimitiveType0
      end

      module PrimitiveType1
      end

      module PrimitiveType2
      end

      module PrimitiveType3
        def build(parent)
          Ast::Type.new(parent, text_value)
        end
      end

      def _nt_PrimitiveType
        start_index = index
        if node_cache[:PrimitiveType].has_key?(index)
          cached = node_cache[:PrimitiveType][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_UnsignedIntegerType
        if r1
          r0 = r1
          r0.extend(PrimitiveType3)
        else
          r2 = _nt_UnrestrictedFloatType
          if r2
            r0 = r2
            r0.extend(PrimitiveType3)
          else
            i3, s3 = index, []
            if has_terminal?("boolean", false, index)
              r4 = instantiate_node(SyntaxNode,input, index...(index + 7))
              @index += 7
            else
              terminal_parse_failure("boolean")
              r4 = nil
            end
            s3 << r4
            if r4
              i5 = index
              r6 = _nt_NonSpace
              if r6
                r5 = nil
              else
                @index = i5
                r5 = instantiate_node(SyntaxNode,input, index...index)
              end
              s3 << r5
            end
            if s3.last
              r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
              r3.extend(PrimitiveType0)
            else
              @index = i3
              r3 = nil
            end
            if r3
              r0 = r3
              r0.extend(PrimitiveType3)
            else
              i7, s7 = index, []
              if has_terminal?("byte", false, index)
                r8 = instantiate_node(SyntaxNode,input, index...(index + 4))
                @index += 4
              else
                terminal_parse_failure("byte")
                r8 = nil
              end
              s7 << r8
              if r8
                i9 = index
                r10 = _nt_NonSpace
                if r10
                  r9 = nil
                else
                  @index = i9
                  r9 = instantiate_node(SyntaxNode,input, index...index)
                end
                s7 << r9
              end
              if s7.last
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                r7.extend(PrimitiveType1)
              else
                @index = i7
                r7 = nil
              end
              if r7
                r0 = r7
                r0.extend(PrimitiveType3)
              else
                i11, s11 = index, []
                if has_terminal?("octet", false, index)
                  r12 = instantiate_node(SyntaxNode,input, index...(index + 5))
                  @index += 5
                else
                  terminal_parse_failure("octet")
                  r12 = nil
                end
                s11 << r12
                if r12
                  i13 = index
                  r14 = _nt_NonSpace
                  if r14
                    r13 = nil
                  else
                    @index = i13
                    r13 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s11 << r13
                end
                if s11.last
                  r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                  r11.extend(PrimitiveType2)
                else
                  @index = i11
                  r11 = nil
                end
                if r11
                  r0 = r11
                  r0.extend(PrimitiveType3)
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end

        node_cache[:PrimitiveType][start_index] = r0

        r0
      end

      def _nt_Null
        start_index = index
        if node_cache[:Null].has_key?(index)
          cached = node_cache[:Null][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        if has_terminal?("?", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("?")
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:Null][start_index] = r0

        r0
      end

      module TypeSuffix0
        def ws
          elements[1]
        end

      end

      module TypeSuffix1
        def array
          elements[0]
        end

        def suffix
          elements[1]
        end
      end

      module TypeSuffix2
        def null
          elements[0]
        end

        def suffix
          elements[1]
        end
      end

      def _nt_TypeSuffix
        start_index = index
        if node_cache[:TypeSuffix].has_key?(index)
          cached = node_cache[:TypeSuffix][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1 = index
        i2, s2 = index, []
        i3, s3 = index, []
        if has_terminal?("[", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("[")
          r4 = nil
        end
        s3 << r4
        if r4
          r5 = _nt_ws
          s3 << r5
          if r5
            if has_terminal?("]", false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("]")
              r6 = nil
            end
            s3 << r6
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(TypeSuffix0)
        else
          @index = i3
          r3 = nil
        end
        s2 << r3
        if r3
          r7 = _nt_TypeSuffix
          s2 << r7
        end
        if s2.last
          r2 = instantiate_node(ParseTree::TypeSuffix,input, i2...index, s2)
          r2.extend(TypeSuffix1)
        else
          @index = i2
          r2 = nil
        end
        if r2
          r1 = r2
        else
          i8, s8 = index, []
          if has_terminal?("?", false, index)
            r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("?")
            r9 = nil
          end
          s8 << r9
          if r9
            r10 = _nt_TypeSuffixStartingWithArray
            s8 << r10
          end
          if s8.last
            r8 = instantiate_node(ParseTree::TypeSuffix,input, i8...index, s8)
            r8.extend(TypeSuffix2)
          else
            @index = i8
            r8 = nil
          end
          if r8
            r1 = r8
          else
            @index = i1
            r1 = nil
          end
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:TypeSuffix][start_index] = r0

        r0
      end

      module TypeSuffixStartingWithArray0
        def ws
          elements[1]
        end

      end

      module TypeSuffixStartingWithArray1
        def array
          elements[0]
        end

        def ws
          elements[1]
        end

        def suffix
          elements[2]
        end
      end

      def _nt_TypeSuffixStartingWithArray
        start_index = index
        if node_cache[:TypeSuffixStartingWithArray].has_key?(index)
          cached = node_cache[:TypeSuffixStartingWithArray][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        i2, s2 = index, []
        if has_terminal?("[", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("[")
          r3 = nil
        end
        s2 << r3
        if r3
          r4 = _nt_ws
          s2 << r4
          if r4
            if has_terminal?("]", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("]")
              r5 = nil
            end
            s2 << r5
          end
        end
        if s2.last
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          r2.extend(TypeSuffixStartingWithArray0)
        else
          @index = i2
          r2 = nil
        end
        s1 << r2
        if r2
          r6 = _nt_ws
          s1 << r6
          if r6
            r7 = _nt_TypeSuffix
            s1 << r7
          end
        end
        if s1.last
          r1 = instantiate_node(ParseTree::TypeSuffix,input, i1...index, s1)
          r1.extend(TypeSuffixStartingWithArray1)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:TypeSuffixStartingWithArray][start_index] = r0

        r0
      end

      module UnsignedIntegerType0
        def ws
          elements[1]
        end

        def IntegerType
          elements[2]
        end
      end

      def _nt_UnsignedIntegerType
        start_index = index
        if node_cache[:UnsignedIntegerType].has_key?(index)
          cached = node_cache[:UnsignedIntegerType][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        i1, s1 = index, []
        if has_terminal?("unsigned", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 8))
          @index += 8
        else
          terminal_parse_failure("unsigned")
          r2 = nil
        end
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            r4 = _nt_IntegerType
            s1 << r4
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(UnsignedIntegerType0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r5 = _nt_IntegerType
          if r5
            r0 = r5
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:UnsignedIntegerType][start_index] = r0

        r0
      end

      module UnrestrictedFloatType0
        def ws
          elements[1]
        end

        def FloatType
          elements[2]
        end
      end

      def _nt_UnrestrictedFloatType
        start_index = index
        if node_cache[:UnrestrictedFloatType].has_key?(index)
          cached = node_cache[:UnrestrictedFloatType][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        i1, s1 = index, []
        if has_terminal?("unrestricted", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 12))
          @index += 12
        else
          terminal_parse_failure("unrestricted")
          r2 = nil
        end
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            r4 = _nt_FloatType
            s1 << r4
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(UnrestrictedFloatType0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r5 = _nt_FloatType
          if r5
            r0 = r5
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:UnrestrictedFloatType][start_index] = r0

        r0
      end

      def _nt_FloatType
        start_index = index
        if node_cache[:FloatType].has_key?(index)
          cached = node_cache[:FloatType][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        if has_terminal?("float", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
          @index += 5
        else
          terminal_parse_failure("float")
          r1 = nil
        end
        if r1
          r0 = r1
        else
          if has_terminal?("double", false, index)
            r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
            @index += 6
          else
            terminal_parse_failure("double")
            r2 = nil
          end
          if r2
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:FloatType][start_index] = r0

        r0
      end

      module IntegerType0
        def ws
          elements[1]
        end

        def OptionalLong
          elements[2]
        end
      end

      def _nt_IntegerType
        start_index = index
        if node_cache[:IntegerType].has_key?(index)
          cached = node_cache[:IntegerType][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        if has_terminal?("short", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
          @index += 5
        else
          terminal_parse_failure("short")
          r1 = nil
        end
        if r1
          r0 = r1
        else
          i2, s2 = index, []
          if has_terminal?("long", false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 4))
            @index += 4
          else
            terminal_parse_failure("long")
            r3 = nil
          end
          s2 << r3
          if r3
            r4 = _nt_ws
            s2 << r4
            if r4
              r5 = _nt_OptionalLong
              s2 << r5
            end
          end
          if s2.last
            r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
            r2.extend(IntegerType0)
          else
            @index = i2
            r2 = nil
          end
          if r2
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:IntegerType][start_index] = r0

        r0
      end

      def _nt_OptionalLong
        start_index = index
        if node_cache[:OptionalLong].has_key?(index)
          cached = node_cache[:OptionalLong][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        if has_terminal?("long", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure("long")
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:OptionalLong][start_index] = r0

        r0
      end

      module Array0
        def ws
          elements[1]
        end

      end

      def _nt_Array
        start_index = index
        if node_cache[:Array].has_key?(index)
          cached = node_cache[:Array][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        if has_terminal?("[", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("[")
          r2 = nil
        end
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            if has_terminal?("]", false, index)
              r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("]")
              r4 = nil
            end
            s1 << r4
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(Array0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:Array][start_index] = r0

        r0
      end

      module NonSpace0
      end

      def _nt_NonSpace
        start_index = index
        if node_cache[:NonSpace].has_key?(index)
          cached = node_cache[:NonSpace][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        i1 = index
        if has_terminal?(' ', false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(' ')
          r2 = nil
        end
        if r2
          r1 = nil
        else
          @index = i1
          r1 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r1
        if r1
          if index < input_length
            r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r3 = nil
          end
          s0 << r3
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(NonSpace0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:NonSpace][start_index] = r0

        r0
      end

      def _nt_ReturnType
        start_index = index
        if node_cache[:ReturnType].has_key?(index)
          cached = node_cache[:ReturnType][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_Type
        if r1
          r0 = r1
        else
          if has_terminal?("void", false, index)
            r2 = instantiate_node(ParseTree::VoidType,input, index...(index + 4))
            @index += 4
          else
            terminal_parse_failure("void")
            r2 = nil
          end
          if r2
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:ReturnType][start_index] = r0

        r0
      end

      module ScopedNameList0
        def name
          elements[0]
        end

        def ws
          elements[1]
        end

        def names
          elements[2]
        end
      end

      def _nt_ScopedNameList
        start_index = index
        if node_cache[:ScopedNameList].has_key?(index)
          cached = node_cache[:ScopedNameList][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_ScopedName
        s0 << r1
        if r1
          r2 = _nt_ws
          s0 << r2
          if r2
            r3 = _nt_ScopedNames
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::ScopedNameList,input, i0...index, s0)
          r0.extend(ScopedNameList0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:ScopedNameList][start_index] = r0

        r0
      end

      module ScopedNames0
        def ScopedName
          elements[1]
        end

        def ws
          elements[2]
        end

        def ScopedNames
          elements[3]
        end
      end

      def _nt_ScopedNames
        start_index = index
        if node_cache[:ScopedNames].has_key?(index)
          cached = node_cache[:ScopedNames][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        if has_terminal?(",", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(",")
          r2 = nil
        end
        s1 << r2
        if r2
          r3 = _nt_ScopedName
          s1 << r3
          if r3
            r4 = _nt_ws
            s1 << r4
            if r4
              r5 = _nt_ScopedNames
              s1 << r5
            end
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(ScopedNames0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:ScopedNames][start_index] = r0

        r0
      end

      def _nt_ScopedName
        start_index = index
        if node_cache[:ScopedName].has_key?(index)
          cached = node_cache[:ScopedName][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_AbsoluteScopedName
        if r1
          r0 = r1
        else
          r2 = _nt_RelativeScopedName
          if r2
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:ScopedName][start_index] = r0

        r0
      end

      module AbsoluteScopedName0
        def name
          elements[1]
        end

        def parts
          elements[2]
        end
      end

      def _nt_AbsoluteScopedName
        start_index = index
        if node_cache[:AbsoluteScopedName].has_key?(index)
          cached = node_cache[:AbsoluteScopedName][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("::", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("::")
          r1 = nil
        end
        s0 << r1
        if r1
          r2 = _nt_identifier
          s0 << r2
          if r2
            r3 = _nt_ScopedNameParts
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(ParseTree::AbsoluteScopedName,input, i0...index, s0)
          r0.extend(AbsoluteScopedName0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:AbsoluteScopedName][start_index] = r0

        r0
      end

      module RelativeScopedName0
        def name
          elements[0]
        end

        def parts
          elements[1]
        end
      end

      def _nt_RelativeScopedName
        start_index = index
        if node_cache[:RelativeScopedName].has_key?(index)
          cached = node_cache[:RelativeScopedName][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_identifier
        s0 << r1
        if r1
          r2 = _nt_ScopedNameParts
          s0 << r2
        end
        if s0.last
          r0 = instantiate_node(ParseTree::RelativeScopedName,input, i0...index, s0)
          r0.extend(RelativeScopedName0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:RelativeScopedName][start_index] = r0

        r0
      end

      module ScopedNameParts0
        def ws
          elements[1]
        end

        def name
          elements[2]
        end

        def parts
          elements[3]
        end
      end

      def _nt_ScopedNameParts
        start_index = index
        if node_cache[:ScopedNameParts].has_key?(index)
          cached = node_cache[:ScopedNameParts][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1, s1 = index, []
        if has_terminal?("::", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("::")
          r2 = nil
        end
        s1 << r2
        if r2
          r3 = _nt_ws
          s1 << r3
          if r3
            r4 = _nt_identifier
            s1 << r4
            if r4
              r5 = _nt_ScopedNameParts
              s1 << r5
            end
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(ScopedNameParts0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:ScopedNameParts][start_index] = r0

        r0
      end

      module Integer0
        def build() Integer(text_value) end
      end

      def _nt_integer
        start_index = index
        if node_cache[:integer].has_key?(index)
          cached = node_cache[:integer][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_hexint
        if r1
          r0 = r1
          r0.extend(Integer0)
        else
          r2 = _nt_octint
          if r2
            r0 = r2
            r0.extend(Integer0)
          else
            r3 = _nt_decint
            if r3
              r0 = r3
              r0.extend(Integer0)
            else
              @index = i0
              r0 = nil
            end
          end
        end

        node_cache[:integer][start_index] = r0

        r0
      end

      module Hexint0
      end

      def _nt_hexint
        start_index = index
        if node_cache[:hexint].has_key?(index)
          cached = node_cache[:hexint][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("-", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("-")
          r2 = nil
        end
        if r2
          r1 = r2
        else
          r1 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r1
        if r1
          if has_terminal?("0", false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("0")
            r3 = nil
          end
          s0 << r3
          if r3
            if has_terminal?('\G[Xx]', true, index)
              r4 = true
              @index += 1
            else
              r4 = nil
            end
            s0 << r4
            if r4
              s5, i5 = [], index
              loop do
                if has_terminal?('\G[0-9A-Fa-f]', true, index)
                  r6 = true
                  @index += 1
                else
                  r6 = nil
                end
                if r6
                  s5 << r6
                else
                  break
                end
              end
              if s5.empty?
                @index = i5
                r5 = nil
              else
                r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              end
              s0 << r5
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(Hexint0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:hexint][start_index] = r0

        r0
      end

      module Octint0
      end

      def _nt_octint
        start_index = index
        if node_cache[:octint].has_key?(index)
          cached = node_cache[:octint][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("-", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("-")
          r2 = nil
        end
        if r2
          r1 = r2
        else
          r1 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r1
        if r1
          if has_terminal?("0", false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("0")
            r3 = nil
          end
          s0 << r3
          if r3
            s4, i4 = [], index
            loop do
              if has_terminal?('\G[0-7]', true, index)
                r5 = true
                @index += 1
              else
                r5 = nil
              end
              if r5
                s4 << r5
              else
                break
              end
            end
            if s4.empty?
              @index = i4
              r4 = nil
            else
              r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            end
            s0 << r4
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(Octint0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:octint][start_index] = r0

        r0
      end

      module Decint0
      end

      def _nt_decint
        start_index = index
        if node_cache[:decint].has_key?(index)
          cached = node_cache[:decint][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("-", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("-")
          r2 = nil
        end
        if r2
          r1 = r2
        else
          r1 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r1
        if r1
          s3, i3 = [], index
          loop do
            if has_terminal?('\G[0-9]', true, index)
              r4 = true
              @index += 1
            else
              r4 = nil
            end
            if r4
              s3 << r4
            else
              break
            end
          end
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          s0 << r3
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(Decint0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:decint][start_index] = r0

        r0
      end

      module Float0
      end

      module Float1
      end

      module Float2
      end

      module Float3
      end

      module Float4
      end

      module Float5
        def build() Float(text_value) end
      end

      def _nt_float
        start_index = index
        if node_cache[:float].has_key?(index)
          cached = node_cache[:float][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        i1, s1 = index, []
        if has_terminal?("-", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("-")
          r3 = nil
        end
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r2
        if r2
          i4 = index
          i5, s5 = index, []
          s6, i6 = [], index
          loop do
            if has_terminal?('\G[0-9]', true, index)
              r7 = true
              @index += 1
            else
              r7 = nil
            end
            if r7
              s6 << r7
            else
              break
            end
          end
          if s6.empty?
            @index = i6
            r6 = nil
          else
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          end
          s5 << r6
          if r6
            if has_terminal?(".", false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(".")
              r8 = nil
            end
            s5 << r8
            if r8
              s9, i9 = [], index
              loop do
                if has_terminal?('\G[0-9]', true, index)
                  r10 = true
                  @index += 1
                else
                  r10 = nil
                end
                if r10
                  s9 << r10
                else
                  break
                end
              end
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              s5 << r9
            end
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(Float0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r4 = r5
          else
            i11, s11 = index, []
            s12, i12 = [], index
            loop do
              if has_terminal?('\G[0-9]', true, index)
                r13 = true
                @index += 1
              else
                r13 = nil
              end
              if r13
                s12 << r13
              else
                break
              end
            end
            r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
            s11 << r12
            if r12
              if has_terminal?(".", false, index)
                r14 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(".")
                r14 = nil
              end
              s11 << r14
              if r14
                s15, i15 = [], index
                loop do
                  if has_terminal?('\G[0-9]', true, index)
                    r16 = true
                    @index += 1
                  else
                    r16 = nil
                  end
                  if r16
                    s15 << r16
                  else
                    break
                  end
                end
                if s15.empty?
                  @index = i15
                  r15 = nil
                else
                  r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
                end
                s11 << r15
              end
            end
            if s11.last
              r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
              r11.extend(Float1)
            else
              @index = i11
              r11 = nil
            end
            if r11
              r4 = r11
            else
              @index = i4
              r4 = nil
            end
          end
          s1 << r4
          if r4
            i18, s18 = index, []
            if has_terminal?('\G[Ee]', true, index)
              r19 = true
              @index += 1
            else
              r19 = nil
            end
            s18 << r19
            if r19
              if has_terminal?('\G[+-]', true, index)
                r21 = true
                @index += 1
              else
                r21 = nil
              end
              if r21
                r20 = r21
              else
                r20 = instantiate_node(SyntaxNode,input, index...index)
              end
              s18 << r20
              if r20
                s22, i22 = [], index
                loop do
                  if has_terminal?('\G[0-9]', true, index)
                    r23 = true
                    @index += 1
                  else
                    r23 = nil
                  end
                  if r23
                    s22 << r23
                  else
                    break
                  end
                end
                if s22.empty?
                  @index = i22
                  r22 = nil
                else
                  r22 = instantiate_node(SyntaxNode,input, i22...index, s22)
                end
                s18 << r22
              end
            end
            if s18.last
              r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
              r18.extend(Float2)
            else
              @index = i18
              r18 = nil
            end
            if r18
              r17 = r18
            else
              r17 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r17
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(Float3)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r0 = r1
          r0.extend(Float5)
        else
          i24, s24 = index, []
          s25, i25 = [], index
          loop do
            if has_terminal?('\G[0-9]', true, index)
              r26 = true
              @index += 1
            else
              r26 = nil
            end
            if r26
              s25 << r26
            else
              break
            end
          end
          if s25.empty?
            @index = i25
            r25 = nil
          else
            r25 = instantiate_node(SyntaxNode,input, i25...index, s25)
          end
          s24 << r25
          if r25
            if has_terminal?('\G[Ee]', true, index)
              r27 = true
              @index += 1
            else
              r27 = nil
            end
            s24 << r27
            if r27
              if has_terminal?('\G[+-]', true, index)
                r29 = true
                @index += 1
              else
                r29 = nil
              end
              if r29
                r28 = r29
              else
                r28 = instantiate_node(SyntaxNode,input, index...index)
              end
              s24 << r28
              if r28
                s30, i30 = [], index
                loop do
                  if has_terminal?('\G[0-9]', true, index)
                    r31 = true
                    @index += 1
                  else
                    r31 = nil
                  end
                  if r31
                    s30 << r31
                  else
                    break
                  end
                end
                if s30.empty?
                  @index = i30
                  r30 = nil
                else
                  r30 = instantiate_node(SyntaxNode,input, i30...index, s30)
                end
                s24 << r30
              end
            end
          end
          if s24.last
            r24 = instantiate_node(SyntaxNode,input, i24...index, s24)
            r24.extend(Float4)
          else
            @index = i24
            r24 = nil
          end
          if r24
            r0 = r24
            r0.extend(Float5)
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:float][start_index] = r0

        r0
      end

      module Identifier0
      end

      module Identifier1
        def build(parent = nil) text_value[/^_?(.+)/, 1] end
      end

      def _nt_identifier
        start_index = index
        if node_cache[:identifier].has_key?(index)
          cached = node_cache[:identifier][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?('\G[A-Z_a-z]', true, index)
          r1 = true
          @index += 1
        else
          r1 = nil
        end
        s0 << r1
        if r1
          s2, i2 = [], index
          loop do
            if has_terminal?('\G[0-9A-Z_a-z]', true, index)
              r3 = true
              @index += 1
            else
              r3 = nil
            end
            if r3
              s2 << r3
            else
              break
            end
          end
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          s0 << r2
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(Identifier0)
          r0.extend(Identifier1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:identifier][start_index] = r0

        r0
      end

      def _nt_string
        start_index = index
        if node_cache[:string].has_key?(index)
          cached = node_cache[:string][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_double_quoted_string
        if r1
          r0 = r1
        else
          r2 = _nt_single_quoted_string
          if r2
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:string][start_index] = r0

        r0
      end

      module DoubleQuotedString0
        def data
          elements[1]
        end

      end

      module DoubleQuotedString1
        def build() data.text_value end
      end

      def _nt_double_quoted_string
        start_index = index
        if node_cache[:double_quoted_string].has_key?(index)
          cached = node_cache[:double_quoted_string][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("\"", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\"")
          r1 = nil
        end
        s0 << r1
        if r1
          s2, i2 = [], index
          loop do
            if has_terminal?('\G[^"]', true, index)
              r3 = true
              @index += 1
            else
              r3 = nil
            end
            if r3
              s2 << r3
            else
              break
            end
          end
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          s0 << r2
          if r2
            if has_terminal?("\"", false, index)
              r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("\"")
              r4 = nil
            end
            s0 << r4
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(DoubleQuotedString0)
          r0.extend(DoubleQuotedString1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:double_quoted_string][start_index] = r0

        r0
      end

      module SingleQuotedString0
        def data
          elements[1]
        end

      end

      module SingleQuotedString1
        def build() data.text_value end
      end

      def _nt_single_quoted_string
        start_index = index
        if node_cache[:single_quoted_string].has_key?(index)
          cached = node_cache[:single_quoted_string][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("'", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("'")
          r1 = nil
        end
        s0 << r1
        if r1
          s2, i2 = [], index
          loop do
            if has_terminal?('\G[^\']', true, index)
              r3 = true
              @index += 1
            else
              r3 = nil
            end
            if r3
              s2 << r3
            else
              break
            end
          end
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          s0 << r2
          if r2
            if has_terminal?("'", false, index)
              r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("'")
              r4 = nil
            end
            s0 << r4
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(SingleQuotedString0)
          r0.extend(SingleQuotedString1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:single_quoted_string][start_index] = r0

        r0
      end

      module Ws0
      end

      module Ws1
      end

      def _nt_ws
        start_index = index
        if node_cache[:ws].has_key?(index)
          cached = node_cache[:ws][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i1 = index
        i2, s2 = index, []
        s3, i3 = [], index
        loop do
          if has_terminal?('\G[\\t\\n\\r ]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s2 << r3
        if r3
          s5, i5 = [], index
          loop do
            i6, s6 = index, []
            i7 = index
            r8 = _nt_line_comment
            if r8
              r7 = r8
            else
              r9 = _nt_block_comment
              if r9
                r7 = r9
              else
                @index = i7
                r7 = nil
              end
            end
            s6 << r7
            if r7
              s10, i10 = [], index
              loop do
                if has_terminal?('\G[\\t\\n\\r ]', true, index)
                  r11 = true
                  @index += 1
                else
                  r11 = nil
                end
                if r11
                  s10 << r11
                else
                  break
                end
              end
              r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
              s6 << r10
            end
            if s6.last
              r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
              r6.extend(Ws0)
            else
              @index = i6
              r6 = nil
            end
            if r6
              s5 << r6
            else
              break
            end
          end
          if s5.empty?
            @index = i5
            r5 = nil
          else
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          end
          s2 << r5
        end
        if s2.last
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          r2.extend(Ws1)
        else
          @index = i2
          r2 = nil
        end
        if r2
          r1 = r2
        else
          s12, i12 = [], index
          loop do
            if has_terminal?('\G[\\t\\n\\r ]', true, index)
              r13 = true
              @index += 1
            else
              r13 = nil
            end
            if r13
              s12 << r13
            else
              break
            end
          end
          if s12.empty?
            @index = i12
            r12 = nil
          else
            r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
          end
          if r12
            r1 = r12
          else
            @index = i1
            r1 = nil
          end
        end
        if r1
          r0 = r1
        else
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:ws][start_index] = r0

        r0
      end

      def _nt_other
        start_index = index
        if node_cache[:other].has_key?(index)
          cached = node_cache[:other][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        if has_terminal?('\G[^\\t\\n\\r 0-9A-Z_a-z]', true, index)
          r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          r0 = nil
        end

        node_cache[:other][start_index] = r0

        r0
      end

      module LineComment0
      end

      module LineComment1
      end

      def _nt_line_comment
        start_index = index
        if node_cache[:line_comment].has_key?(index)
          cached = node_cache[:line_comment][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?("//", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("//")
          r1 = nil
        end
        s0 << r1
        if r1
          s2, i2 = [], index
          loop do
            i3, s3 = index, []
            i4 = index
            if has_terminal?('\G[\\n\\r]', true, index)
              r5 = true
              @index += 1
            else
              r5 = nil
            end
            if r5
              r4 = nil
            else
              @index = i4
              r4 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r4
            if r4
              if index < input_length
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("any character")
                r6 = nil
              end
              s3 << r6
            end
            if s3.last
              r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
              r3.extend(LineComment0)
            else
              @index = i3
              r3 = nil
            end
            if r3
              s2 << r3
            else
              break
            end
          end
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          s0 << r2
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(LineComment1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:line_comment][start_index] = r0

        r0
      end

      module BlockComment0
      end

      module BlockComment1
      end

      def _nt_block_comment
        start_index = index
        if node_cache[:block_comment].has_key?(index)
          cached = node_cache[:block_comment][index]
          if cached
            cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if has_terminal?('/*', false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('/*')
          r1 = nil
        end
        s0 << r1
        if r1
          s2, i2 = [], index
          loop do
            i3, s3 = index, []
            i4 = index
            if has_terminal?('*/', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('*/')
              r5 = nil
            end
            if r5
              r4 = nil
            else
              @index = i4
              r4 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r4
            if r4
              if index < input_length
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("any character")
                r6 = nil
              end
              s3 << r6
            end
            if s3.last
              r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
              r3.extend(BlockComment0)
            else
              @index = i3
              r3 = nil
            end
            if r3
              s2 << r3
            else
              break
            end
          end
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          s0 << r2
          if r2
            if has_terminal?('*/', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('*/')
              r7 = nil
            end
            s0 << r7
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(BlockComment1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:block_comment][start_index] = r0

        r0
      end

    end

    class IDLParser < Treetop::Runtime::CompiledParser
      include IDL
    end
 # IDL
  end # Parser
end # WebIDL
